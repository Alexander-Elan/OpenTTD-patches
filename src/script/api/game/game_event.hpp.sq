/* $Id$ */

/*
 * This file is part of OpenTTD.
 * OpenTTD is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * OpenTTD is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with OpenTTD. If not, see <http://www.gnu.org/licenses/>.
 */

/* THIS FILE IS AUTO-GENERATED; PLEASE DO NOT ALTER MANUALLY */

#include "../script_event.hpp"


template <> const char *GetClassName<ScriptEvent, ST_GS>() { return "GSEvent"; }

static void SQGSEvent_Register (Squirrel *engine)
{
	engine->AddClassBegin (GetClassName <ScriptEvent, ST_GS> ());
	SQConvert::AddConstructor <ScriptEvent, void (ScriptEvent::*)(ScriptEvent::ScriptEventType type), 2> (engine, "xi");

	engine->AddConst ("ET_INVALID",                     ScriptEvent::ET_INVALID);
	engine->AddConst ("ET_TEST",                        ScriptEvent::ET_TEST);
	engine->AddConst ("ET_SUBSIDY_OFFER",               ScriptEvent::ET_SUBSIDY_OFFER);
	engine->AddConst ("ET_SUBSIDY_OFFER_EXPIRED",       ScriptEvent::ET_SUBSIDY_OFFER_EXPIRED);
	engine->AddConst ("ET_SUBSIDY_AWARDED",             ScriptEvent::ET_SUBSIDY_AWARDED);
	engine->AddConst ("ET_SUBSIDY_EXPIRED",             ScriptEvent::ET_SUBSIDY_EXPIRED);
	engine->AddConst ("ET_ENGINE_PREVIEW",              ScriptEvent::ET_ENGINE_PREVIEW);
	engine->AddConst ("ET_COMPANY_NEW",                 ScriptEvent::ET_COMPANY_NEW);
	engine->AddConst ("ET_COMPANY_IN_TROUBLE",          ScriptEvent::ET_COMPANY_IN_TROUBLE);
	engine->AddConst ("ET_COMPANY_ASK_MERGER",          ScriptEvent::ET_COMPANY_ASK_MERGER);
	engine->AddConst ("ET_COMPANY_MERGER",              ScriptEvent::ET_COMPANY_MERGER);
	engine->AddConst ("ET_COMPANY_BANKRUPT",            ScriptEvent::ET_COMPANY_BANKRUPT);
	engine->AddConst ("ET_VEHICLE_CRASHED",             ScriptEvent::ET_VEHICLE_CRASHED);
	engine->AddConst ("ET_VEHICLE_LOST",                ScriptEvent::ET_VEHICLE_LOST);
	engine->AddConst ("ET_VEHICLE_WAITING_IN_DEPOT",    ScriptEvent::ET_VEHICLE_WAITING_IN_DEPOT);
	engine->AddConst ("ET_VEHICLE_UNPROFITABLE",        ScriptEvent::ET_VEHICLE_UNPROFITABLE);
	engine->AddConst ("ET_INDUSTRY_OPEN",               ScriptEvent::ET_INDUSTRY_OPEN);
	engine->AddConst ("ET_INDUSTRY_CLOSE",              ScriptEvent::ET_INDUSTRY_CLOSE);
	engine->AddConst ("ET_ENGINE_AVAILABLE",            ScriptEvent::ET_ENGINE_AVAILABLE);
	engine->AddConst ("ET_STATION_FIRST_VEHICLE",       ScriptEvent::ET_STATION_FIRST_VEHICLE);
	engine->AddConst ("ET_DISASTER_ZEPPELINER_CRASHED", ScriptEvent::ET_DISASTER_ZEPPELINER_CRASHED);
	engine->AddConst ("ET_DISASTER_ZEPPELINER_CLEARED", ScriptEvent::ET_DISASTER_ZEPPELINER_CLEARED);
	engine->AddConst ("ET_TOWN_FOUNDED",                ScriptEvent::ET_TOWN_FOUNDED);
	engine->AddConst ("ET_AIRCRAFT_DEST_TOO_FAR",       ScriptEvent::ET_AIRCRAFT_DEST_TOO_FAR);
	engine->AddConst ("ET_ADMIN_PORT",                  ScriptEvent::ET_ADMIN_PORT);
	engine->AddConst ("ET_WINDOW_WIDGET_CLICK",         ScriptEvent::ET_WINDOW_WIDGET_CLICK);
	engine->AddConst ("ET_GOAL_QUESTION_ANSWER",        ScriptEvent::ET_GOAL_QUESTION_ANSWER);
	engine->AddConst ("ET_EXCLUSIVE_TRANSPORT_RIGHTS",  ScriptEvent::ET_EXCLUSIVE_TRANSPORT_RIGHTS);
	engine->AddConst ("ET_ROAD_RECONSTRUCTION",         ScriptEvent::ET_ROAD_RECONSTRUCTION);

	SQConvert::DefSQMethod <ScriptEvent, ST_GS> (engine, &ScriptEvent::GetEventType, "GetEventType", 1, "x");

	engine->AddClassEnd();
}


template <> const char *GetClassName<ScriptEventController, ST_GS>() { return "GSEventController"; }

static void SQGSEventController_Register (Squirrel *engine)
{
	engine->AddClassBegin (GetClassName <ScriptEventController, ST_GS> ());
	SQConvert::AddConstructor <ScriptEventController, void (ScriptEventController::*)(), 1> (engine, "x");

	SQConvert::DefSQStaticMethod (engine, &ScriptEventController::IsEventWaiting, "IsEventWaiting", 1, ".");
	SQConvert::DefSQStaticMethod (engine, &ScriptEventController::GetNextEvent,   "GetNextEvent",   1, ".");

	engine->AddClassEnd();
}
