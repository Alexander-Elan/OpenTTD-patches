/* $Id$ */

/*
 * This file is part of OpenTTD.
 * OpenTTD is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * OpenTTD is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with OpenTTD. If not, see <http://www.gnu.org/licenses/>.
 */

/* THIS FILE IS AUTO-GENERATED; PLEASE DO NOT ALTER MANUALLY */

#include "../script_tile.hpp"


static void SQAITile_Register (Squirrel *engine)
{
	engine->AddClassBegin ("AITile");
	SQConvert::AddConstructor <void (ScriptTile::*)(), 1> (engine, "x");

	engine->AddConst ("ERR_TILE_BASE",               ScriptTile::ERR_TILE_BASE);
	engine->AddConst ("ERR_TILE_TOO_HIGH",           ScriptTile::ERR_TILE_TOO_HIGH);
	engine->AddConst ("ERR_TILE_TOO_LOW",            ScriptTile::ERR_TILE_TOO_LOW);
	engine->AddConst ("ERR_AREA_ALREADY_FLAT",       ScriptTile::ERR_AREA_ALREADY_FLAT);
	engine->AddConst ("ERR_EXCAVATION_WOULD_DAMAGE", ScriptTile::ERR_EXCAVATION_WOULD_DAMAGE);
	engine->AddConst ("CORNER_W",                    ScriptTile::CORNER_W);
	engine->AddConst ("CORNER_S",                    ScriptTile::CORNER_S);
	engine->AddConst ("CORNER_E",                    ScriptTile::CORNER_E);
	engine->AddConst ("CORNER_N",                    ScriptTile::CORNER_N);
	engine->AddConst ("CORNER_INVALID",              ScriptTile::CORNER_INVALID);
	engine->AddConst ("SLOPE_FLAT",                  ScriptTile::SLOPE_FLAT);
	engine->AddConst ("SLOPE_W",                     ScriptTile::SLOPE_W);
	engine->AddConst ("SLOPE_S",                     ScriptTile::SLOPE_S);
	engine->AddConst ("SLOPE_E",                     ScriptTile::SLOPE_E);
	engine->AddConst ("SLOPE_N",                     ScriptTile::SLOPE_N);
	engine->AddConst ("SLOPE_STEEP",                 ScriptTile::SLOPE_STEEP);
	engine->AddConst ("SLOPE_NW",                    ScriptTile::SLOPE_NW);
	engine->AddConst ("SLOPE_SW",                    ScriptTile::SLOPE_SW);
	engine->AddConst ("SLOPE_SE",                    ScriptTile::SLOPE_SE);
	engine->AddConst ("SLOPE_NE",                    ScriptTile::SLOPE_NE);
	engine->AddConst ("SLOPE_EW",                    ScriptTile::SLOPE_EW);
	engine->AddConst ("SLOPE_NS",                    ScriptTile::SLOPE_NS);
	engine->AddConst ("SLOPE_ELEVATED",              ScriptTile::SLOPE_ELEVATED);
	engine->AddConst ("SLOPE_NWS",                   ScriptTile::SLOPE_NWS);
	engine->AddConst ("SLOPE_WSE",                   ScriptTile::SLOPE_WSE);
	engine->AddConst ("SLOPE_SEN",                   ScriptTile::SLOPE_SEN);
	engine->AddConst ("SLOPE_ENW",                   ScriptTile::SLOPE_ENW);
	engine->AddConst ("SLOPE_STEEP_W",               ScriptTile::SLOPE_STEEP_W);
	engine->AddConst ("SLOPE_STEEP_S",               ScriptTile::SLOPE_STEEP_S);
	engine->AddConst ("SLOPE_STEEP_E",               ScriptTile::SLOPE_STEEP_E);
	engine->AddConst ("SLOPE_STEEP_N",               ScriptTile::SLOPE_STEEP_N);
	engine->AddConst ("SLOPE_INVALID",               ScriptTile::SLOPE_INVALID);
	engine->AddConst ("TRANSPORT_RAIL",              ScriptTile::TRANSPORT_RAIL);
	engine->AddConst ("TRANSPORT_ROAD",              ScriptTile::TRANSPORT_ROAD);
	engine->AddConst ("TRANSPORT_WATER",             ScriptTile::TRANSPORT_WATER);
	engine->AddConst ("TRANSPORT_AIR",               ScriptTile::TRANSPORT_AIR);
	engine->AddConst ("TRANSPORT_INVALID",           ScriptTile::TRANSPORT_INVALID);
	engine->AddConst ("BT_FOUNDATION",               ScriptTile::BT_FOUNDATION);
	engine->AddConst ("BT_TERRAFORM",                ScriptTile::BT_TERRAFORM);
	engine->AddConst ("BT_BUILD_TREES",              ScriptTile::BT_BUILD_TREES);
	engine->AddConst ("BT_CLEAR_GRASS",              ScriptTile::BT_CLEAR_GRASS);
	engine->AddConst ("BT_CLEAR_ROUGH",              ScriptTile::BT_CLEAR_ROUGH);
	engine->AddConst ("BT_CLEAR_ROCKY",              ScriptTile::BT_CLEAR_ROCKY);
	engine->AddConst ("BT_CLEAR_FIELDS",             ScriptTile::BT_CLEAR_FIELDS);
	engine->AddConst ("BT_CLEAR_HOUSE",              ScriptTile::BT_CLEAR_HOUSE);
	engine->AddConst ("TERRAIN_NORMAL",              ScriptTile::TERRAIN_NORMAL);
	engine->AddConst ("TERRAIN_DESERT",              ScriptTile::TERRAIN_DESERT);
	engine->AddConst ("TERRAIN_RAINFOREST",          ScriptTile::TERRAIN_RAINFOREST);
	engine->AddConst ("TERRAIN_SNOW",                ScriptTile::TERRAIN_SNOW);

	ScriptError::RegisterErrorMap(STR_ERROR_ALREADY_AT_SEA_LEVEL,    ScriptTile::ERR_TILE_TOO_HIGH);
	ScriptError::RegisterErrorMap(STR_ERROR_ALREADY_AT_SEA_LEVEL,    ScriptTile::ERR_TILE_TOO_LOW);
	ScriptError::RegisterErrorMap(STR_ERROR_ALREADY_LEVELLED,        ScriptTile::ERR_AREA_ALREADY_FLAT);
	ScriptError::RegisterErrorMap(STR_ERROR_EXCAVATION_WOULD_DAMAGE, ScriptTile::ERR_EXCAVATION_WOULD_DAMAGE);

	ScriptError::RegisterErrorMapString(ScriptTile::ERR_TILE_TOO_HIGH,           "ERR_TILE_TOO_HIGH");
	ScriptError::RegisterErrorMapString(ScriptTile::ERR_TILE_TOO_LOW,            "ERR_TILE_TOO_LOW");
	ScriptError::RegisterErrorMapString(ScriptTile::ERR_AREA_ALREADY_FLAT,       "ERR_AREA_ALREADY_FLAT");
	ScriptError::RegisterErrorMapString(ScriptTile::ERR_EXCAVATION_WOULD_DAMAGE, "ERR_EXCAVATION_WOULD_DAMAGE");

	SQConvert::DefSQStaticMethod (engine, &ScriptTile::IsBuildable,                "IsBuildable",                2, ".i");
	SQConvert::DefSQStaticMethod (engine, &ScriptTile::IsBuildableRectangle,       "IsBuildableRectangle",       4, ".iii");
	SQConvert::DefSQStaticMethod (engine, &ScriptTile::IsWaterTile,                "IsWaterTile",                2, ".i");
	SQConvert::DefSQStaticMethod (engine, &ScriptTile::IsCoastTile,                "IsCoastTile",                2, ".i");
	SQConvert::DefSQStaticMethod (engine, &ScriptTile::IsStationTile,              "IsStationTile",              2, ".i");
	SQConvert::DefSQStaticMethod (engine, &ScriptTile::IsSteepSlope,               "IsSteepSlope",               2, ".i");
	SQConvert::DefSQStaticMethod (engine, &ScriptTile::IsHalftileSlope,            "IsHalftileSlope",            2, ".i");
	SQConvert::DefSQStaticMethod (engine, &ScriptTile::HasTreeOnTile,              "HasTreeOnTile",              2, ".i");
	SQConvert::DefSQStaticMethod (engine, &ScriptTile::IsFarmTile,                 "IsFarmTile",                 2, ".i");
	SQConvert::DefSQStaticMethod (engine, &ScriptTile::IsRockTile,                 "IsRockTile",                 2, ".i");
	SQConvert::DefSQStaticMethod (engine, &ScriptTile::IsRoughTile,                "IsRoughTile",                2, ".i");
	SQConvert::DefSQStaticMethod (engine, &ScriptTile::IsSnowTile,                 "IsSnowTile",                 2, ".i");
	SQConvert::DefSQStaticMethod (engine, &ScriptTile::IsDesertTile,               "IsDesertTile",               2, ".i");
	SQConvert::DefSQStaticMethod (engine, &ScriptTile::GetTerrainType,             "GetTerrainType",             2, ".i");
	SQConvert::DefSQStaticMethod (engine, &ScriptTile::GetSlope,                   "GetSlope",                   2, ".i");
	SQConvert::DefSQStaticMethod (engine, &ScriptTile::GetComplementSlope,         "GetComplementSlope",         2, ".i");
	SQConvert::DefSQStaticMethod (engine, &ScriptTile::GetMinHeight,               "GetMinHeight",               2, ".i");
	SQConvert::DefSQStaticMethod (engine, &ScriptTile::GetMaxHeight,               "GetMaxHeight",               2, ".i");
	SQConvert::DefSQStaticMethod (engine, &ScriptTile::GetCornerHeight,            "GetCornerHeight",            3, ".ii");
	SQConvert::DefSQStaticMethod (engine, &ScriptTile::GetOwner,                   "GetOwner",                   2, ".i");
	SQConvert::DefSQStaticMethod (engine, &ScriptTile::HasTransportType,           "HasTransportType",           3, ".ii");
	SQConvert::DefSQStaticMethod (engine, &ScriptTile::GetCargoAcceptance,         "GetCargoAcceptance",         6, ".iiiii");
	SQConvert::DefSQStaticMethod (engine, &ScriptTile::GetCargoProduction,         "GetCargoProduction",         6, ".iiiii");
	SQConvert::DefSQStaticMethod (engine, &ScriptTile::GetDistanceManhattanToTile, "GetDistanceManhattanToTile", 3, ".ii");
	SQConvert::DefSQStaticMethod (engine, &ScriptTile::GetDistanceSquareToTile,    "GetDistanceSquareToTile",    3, ".ii");
	SQConvert::DefSQStaticMethod (engine, &ScriptTile::RaiseTile,                  "RaiseTile",                  3, ".ii");
	SQConvert::DefSQStaticMethod (engine, &ScriptTile::LowerTile,                  "LowerTile",                  3, ".ii");
	SQConvert::DefSQStaticMethod (engine, &ScriptTile::LevelTiles,                 "LevelTiles",                 3, ".ii");
	SQConvert::DefSQStaticMethod (engine, &ScriptTile::DemolishTile,               "DemolishTile",               2, ".i");
	SQConvert::DefSQStaticMethod (engine, &ScriptTile::PlantTree,                  "PlantTree",                  2, ".i");
	SQConvert::DefSQStaticMethod (engine, &ScriptTile::PlantTreeRectangle,         "PlantTreeRectangle",         4, ".iii");
	SQConvert::DefSQStaticMethod (engine, &ScriptTile::IsWithinTownInfluence,      "IsWithinTownInfluence",      3, ".ii");
	SQConvert::DefSQStaticMethod (engine, &ScriptTile::GetTownAuthority,           "GetTownAuthority",           2, ".i");
	SQConvert::DefSQStaticMethod (engine, &ScriptTile::GetClosestTown,             "GetClosestTown",             2, ".i");
	SQConvert::DefSQStaticMethod (engine, &ScriptTile::GetBuildCost,               "GetBuildCost",               2, ".i");

	engine->AddClassEnd();
}
