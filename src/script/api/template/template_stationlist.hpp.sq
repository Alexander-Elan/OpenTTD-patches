/* $Id$ */

/*
 * This file is part of OpenTTD.
 * OpenTTD is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * OpenTTD is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with OpenTTD. If not, see <http://www.gnu.org/licenses/>.
 */

/* THIS FILE IS AUTO-GENERATED; PLEASE DO NOT ALTER MANUALLY */

#include "../script_stationlist.hpp"

namespace SQConvert {
	/* Allow ScriptStationList to be used as Squirrel parameter */
	template <> inline Param<ScriptStationList*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptStationList> (vm, index)) { }
	template <> inline Param<ScriptStationList&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptStationList> (vm, index)) { }
	template <> inline Param<const ScriptStationList*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptStationList> (vm, index)) { }
	template <> inline Param<const ScriptStationList&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptStationList> (vm, index)) { }
	template <> inline int Return<ScriptStationList *>(HSQUIRRELVM vm, ScriptStationList *res) { if (res == NULL) { sq_pushnull(vm); return 1; } res->AddRef(); Squirrel::CreateClassInstanceVM(vm, "StationList", res, NULL, DefSQDestructorCallback<ScriptStationList>, true); return 1; }
} // namespace SQConvert

namespace SQConvert {
	/* Allow enums to be used as Squirrel parameters */
	template <> inline Param<ScriptStationList_Cargo::CargoSelector>::Param (HSQUIRRELVM vm, int index) : data ((ScriptStationList_Cargo::CargoSelector) GetInteger (vm, index)) { }
	template <> inline int Return<ScriptStationList_Cargo::CargoSelector>(HSQUIRRELVM vm, ScriptStationList_Cargo::CargoSelector res) { sq_pushinteger(vm, (int32)res); return 1; }
	template <> inline Param<ScriptStationList_Cargo::CargoMode>::Param (HSQUIRRELVM vm, int index) : data ((ScriptStationList_Cargo::CargoMode) GetInteger (vm, index)) { }
	template <> inline int Return<ScriptStationList_Cargo::CargoMode>(HSQUIRRELVM vm, ScriptStationList_Cargo::CargoMode res) { sq_pushinteger(vm, (int32)res); return 1; }

	/* Allow ScriptStationList_Cargo to be used as Squirrel parameter */
	template <> inline Param<ScriptStationList_Cargo*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptStationList_Cargo> (vm, index)) { }
	template <> inline Param<ScriptStationList_Cargo&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptStationList_Cargo> (vm, index)) { }
	template <> inline Param<const ScriptStationList_Cargo*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptStationList_Cargo> (vm, index)) { }
	template <> inline Param<const ScriptStationList_Cargo&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptStationList_Cargo> (vm, index)) { }
	template <> inline int Return<ScriptStationList_Cargo *>(HSQUIRRELVM vm, ScriptStationList_Cargo *res) { if (res == NULL) { sq_pushnull(vm); return 1; } res->AddRef(); Squirrel::CreateClassInstanceVM(vm, "StationList_Cargo", res, NULL, DefSQDestructorCallback<ScriptStationList_Cargo>, true); return 1; }
} // namespace SQConvert

namespace SQConvert {
	/* Allow ScriptStationList_CargoWaiting to be used as Squirrel parameter */
	template <> inline Param<ScriptStationList_CargoWaiting*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptStationList_CargoWaiting> (vm, index)) { }
	template <> inline Param<ScriptStationList_CargoWaiting&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptStationList_CargoWaiting> (vm, index)) { }
	template <> inline Param<const ScriptStationList_CargoWaiting*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptStationList_CargoWaiting> (vm, index)) { }
	template <> inline Param<const ScriptStationList_CargoWaiting&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptStationList_CargoWaiting> (vm, index)) { }
	template <> inline int Return<ScriptStationList_CargoWaiting *>(HSQUIRRELVM vm, ScriptStationList_CargoWaiting *res) { if (res == NULL) { sq_pushnull(vm); return 1; } res->AddRef(); Squirrel::CreateClassInstanceVM(vm, "StationList_CargoWaiting", res, NULL, DefSQDestructorCallback<ScriptStationList_CargoWaiting>, true); return 1; }
} // namespace SQConvert

namespace SQConvert {
	/* Allow ScriptStationList_CargoPlanned to be used as Squirrel parameter */
	template <> inline Param<ScriptStationList_CargoPlanned*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptStationList_CargoPlanned> (vm, index)) { }
	template <> inline Param<ScriptStationList_CargoPlanned&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptStationList_CargoPlanned> (vm, index)) { }
	template <> inline Param<const ScriptStationList_CargoPlanned*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptStationList_CargoPlanned> (vm, index)) { }
	template <> inline Param<const ScriptStationList_CargoPlanned&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptStationList_CargoPlanned> (vm, index)) { }
	template <> inline int Return<ScriptStationList_CargoPlanned *>(HSQUIRRELVM vm, ScriptStationList_CargoPlanned *res) { if (res == NULL) { sq_pushnull(vm); return 1; } res->AddRef(); Squirrel::CreateClassInstanceVM(vm, "StationList_CargoPlanned", res, NULL, DefSQDestructorCallback<ScriptStationList_CargoPlanned>, true); return 1; }
} // namespace SQConvert

namespace SQConvert {
	/* Allow ScriptStationList_CargoWaitingByFrom to be used as Squirrel parameter */
	template <> inline Param<ScriptStationList_CargoWaitingByFrom*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptStationList_CargoWaitingByFrom> (vm, index)) { }
	template <> inline Param<ScriptStationList_CargoWaitingByFrom&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptStationList_CargoWaitingByFrom> (vm, index)) { }
	template <> inline Param<const ScriptStationList_CargoWaitingByFrom*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptStationList_CargoWaitingByFrom> (vm, index)) { }
	template <> inline Param<const ScriptStationList_CargoWaitingByFrom&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptStationList_CargoWaitingByFrom> (vm, index)) { }
	template <> inline int Return<ScriptStationList_CargoWaitingByFrom *>(HSQUIRRELVM vm, ScriptStationList_CargoWaitingByFrom *res) { if (res == NULL) { sq_pushnull(vm); return 1; } res->AddRef(); Squirrel::CreateClassInstanceVM(vm, "StationList_CargoWaitingByFrom", res, NULL, DefSQDestructorCallback<ScriptStationList_CargoWaitingByFrom>, true); return 1; }
} // namespace SQConvert

namespace SQConvert {
	/* Allow ScriptStationList_CargoWaitingViaByFrom to be used as Squirrel parameter */
	template <> inline Param<ScriptStationList_CargoWaitingViaByFrom*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptStationList_CargoWaitingViaByFrom> (vm, index)) { }
	template <> inline Param<ScriptStationList_CargoWaitingViaByFrom&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptStationList_CargoWaitingViaByFrom> (vm, index)) { }
	template <> inline Param<const ScriptStationList_CargoWaitingViaByFrom*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptStationList_CargoWaitingViaByFrom> (vm, index)) { }
	template <> inline Param<const ScriptStationList_CargoWaitingViaByFrom&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptStationList_CargoWaitingViaByFrom> (vm, index)) { }
	template <> inline int Return<ScriptStationList_CargoWaitingViaByFrom *>(HSQUIRRELVM vm, ScriptStationList_CargoWaitingViaByFrom *res) { if (res == NULL) { sq_pushnull(vm); return 1; } res->AddRef(); Squirrel::CreateClassInstanceVM(vm, "StationList_CargoWaitingViaByFrom", res, NULL, DefSQDestructorCallback<ScriptStationList_CargoWaitingViaByFrom>, true); return 1; }
} // namespace SQConvert

namespace SQConvert {
	/* Allow ScriptStationList_CargoWaitingByVia to be used as Squirrel parameter */
	template <> inline Param<ScriptStationList_CargoWaitingByVia*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptStationList_CargoWaitingByVia> (vm, index)) { }
	template <> inline Param<ScriptStationList_CargoWaitingByVia&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptStationList_CargoWaitingByVia> (vm, index)) { }
	template <> inline Param<const ScriptStationList_CargoWaitingByVia*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptStationList_CargoWaitingByVia> (vm, index)) { }
	template <> inline Param<const ScriptStationList_CargoWaitingByVia&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptStationList_CargoWaitingByVia> (vm, index)) { }
	template <> inline int Return<ScriptStationList_CargoWaitingByVia *>(HSQUIRRELVM vm, ScriptStationList_CargoWaitingByVia *res) { if (res == NULL) { sq_pushnull(vm); return 1; } res->AddRef(); Squirrel::CreateClassInstanceVM(vm, "StationList_CargoWaitingByVia", res, NULL, DefSQDestructorCallback<ScriptStationList_CargoWaitingByVia>, true); return 1; }
} // namespace SQConvert

namespace SQConvert {
	/* Allow ScriptStationList_CargoWaitingFromByVia to be used as Squirrel parameter */
	template <> inline Param<ScriptStationList_CargoWaitingFromByVia*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptStationList_CargoWaitingFromByVia> (vm, index)) { }
	template <> inline Param<ScriptStationList_CargoWaitingFromByVia&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptStationList_CargoWaitingFromByVia> (vm, index)) { }
	template <> inline Param<const ScriptStationList_CargoWaitingFromByVia*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptStationList_CargoWaitingFromByVia> (vm, index)) { }
	template <> inline Param<const ScriptStationList_CargoWaitingFromByVia&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptStationList_CargoWaitingFromByVia> (vm, index)) { }
	template <> inline int Return<ScriptStationList_CargoWaitingFromByVia *>(HSQUIRRELVM vm, ScriptStationList_CargoWaitingFromByVia *res) { if (res == NULL) { sq_pushnull(vm); return 1; } res->AddRef(); Squirrel::CreateClassInstanceVM(vm, "StationList_CargoWaitingFromByVia", res, NULL, DefSQDestructorCallback<ScriptStationList_CargoWaitingFromByVia>, true); return 1; }
} // namespace SQConvert

namespace SQConvert {
	/* Allow ScriptStationList_CargoPlannedByFrom to be used as Squirrel parameter */
	template <> inline Param<ScriptStationList_CargoPlannedByFrom*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptStationList_CargoPlannedByFrom> (vm, index)) { }
	template <> inline Param<ScriptStationList_CargoPlannedByFrom&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptStationList_CargoPlannedByFrom> (vm, index)) { }
	template <> inline Param<const ScriptStationList_CargoPlannedByFrom*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptStationList_CargoPlannedByFrom> (vm, index)) { }
	template <> inline Param<const ScriptStationList_CargoPlannedByFrom&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptStationList_CargoPlannedByFrom> (vm, index)) { }
	template <> inline int Return<ScriptStationList_CargoPlannedByFrom *>(HSQUIRRELVM vm, ScriptStationList_CargoPlannedByFrom *res) { if (res == NULL) { sq_pushnull(vm); return 1; } res->AddRef(); Squirrel::CreateClassInstanceVM(vm, "StationList_CargoPlannedByFrom", res, NULL, DefSQDestructorCallback<ScriptStationList_CargoPlannedByFrom>, true); return 1; }
} // namespace SQConvert

namespace SQConvert {
	/* Allow ScriptStationList_CargoPlannedViaByFrom to be used as Squirrel parameter */
	template <> inline Param<ScriptStationList_CargoPlannedViaByFrom*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptStationList_CargoPlannedViaByFrom> (vm, index)) { }
	template <> inline Param<ScriptStationList_CargoPlannedViaByFrom&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptStationList_CargoPlannedViaByFrom> (vm, index)) { }
	template <> inline Param<const ScriptStationList_CargoPlannedViaByFrom*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptStationList_CargoPlannedViaByFrom> (vm, index)) { }
	template <> inline Param<const ScriptStationList_CargoPlannedViaByFrom&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptStationList_CargoPlannedViaByFrom> (vm, index)) { }
	template <> inline int Return<ScriptStationList_CargoPlannedViaByFrom *>(HSQUIRRELVM vm, ScriptStationList_CargoPlannedViaByFrom *res) { if (res == NULL) { sq_pushnull(vm); return 1; } res->AddRef(); Squirrel::CreateClassInstanceVM(vm, "StationList_CargoPlannedViaByFrom", res, NULL, DefSQDestructorCallback<ScriptStationList_CargoPlannedViaByFrom>, true); return 1; }
} // namespace SQConvert

namespace SQConvert {
	/* Allow ScriptStationList_CargoPlannedByVia to be used as Squirrel parameter */
	template <> inline Param<ScriptStationList_CargoPlannedByVia*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptStationList_CargoPlannedByVia> (vm, index)) { }
	template <> inline Param<ScriptStationList_CargoPlannedByVia&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptStationList_CargoPlannedByVia> (vm, index)) { }
	template <> inline Param<const ScriptStationList_CargoPlannedByVia*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptStationList_CargoPlannedByVia> (vm, index)) { }
	template <> inline Param<const ScriptStationList_CargoPlannedByVia&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptStationList_CargoPlannedByVia> (vm, index)) { }
	template <> inline int Return<ScriptStationList_CargoPlannedByVia *>(HSQUIRRELVM vm, ScriptStationList_CargoPlannedByVia *res) { if (res == NULL) { sq_pushnull(vm); return 1; } res->AddRef(); Squirrel::CreateClassInstanceVM(vm, "StationList_CargoPlannedByVia", res, NULL, DefSQDestructorCallback<ScriptStationList_CargoPlannedByVia>, true); return 1; }
} // namespace SQConvert

namespace SQConvert {
	/* Allow ScriptStationList_CargoPlannedFromByVia to be used as Squirrel parameter */
	template <> inline Param<ScriptStationList_CargoPlannedFromByVia*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptStationList_CargoPlannedFromByVia> (vm, index)) { }
	template <> inline Param<ScriptStationList_CargoPlannedFromByVia&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptStationList_CargoPlannedFromByVia> (vm, index)) { }
	template <> inline Param<const ScriptStationList_CargoPlannedFromByVia*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptStationList_CargoPlannedFromByVia> (vm, index)) { }
	template <> inline Param<const ScriptStationList_CargoPlannedFromByVia&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptStationList_CargoPlannedFromByVia> (vm, index)) { }
	template <> inline int Return<ScriptStationList_CargoPlannedFromByVia *>(HSQUIRRELVM vm, ScriptStationList_CargoPlannedFromByVia *res) { if (res == NULL) { sq_pushnull(vm); return 1; } res->AddRef(); Squirrel::CreateClassInstanceVM(vm, "StationList_CargoPlannedFromByVia", res, NULL, DefSQDestructorCallback<ScriptStationList_CargoPlannedFromByVia>, true); return 1; }
} // namespace SQConvert

namespace SQConvert {
	/* Allow ScriptStationList_Vehicle to be used as Squirrel parameter */
	template <> inline Param<ScriptStationList_Vehicle*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptStationList_Vehicle> (vm, index)) { }
	template <> inline Param<ScriptStationList_Vehicle&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptStationList_Vehicle> (vm, index)) { }
	template <> inline Param<const ScriptStationList_Vehicle*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptStationList_Vehicle> (vm, index)) { }
	template <> inline Param<const ScriptStationList_Vehicle&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptStationList_Vehicle> (vm, index)) { }
	template <> inline int Return<ScriptStationList_Vehicle *>(HSQUIRRELVM vm, ScriptStationList_Vehicle *res) { if (res == NULL) { sq_pushnull(vm); return 1; } res->AddRef(); Squirrel::CreateClassInstanceVM(vm, "StationList_Vehicle", res, NULL, DefSQDestructorCallback<ScriptStationList_Vehicle>, true); return 1; }
} // namespace SQConvert
