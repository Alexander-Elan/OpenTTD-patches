/* $Id$ */

/*
 * This file is part of OpenTTD.
 * OpenTTD is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * OpenTTD is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with OpenTTD. If not, see <http://www.gnu.org/licenses/>.
 */

/* THIS FILE IS AUTO-GENERATED; PLEASE DO NOT ALTER MANUALLY */

#include "../script_order.hpp"

namespace SQConvert {
	/* Allow enums to be used as Squirrel parameters */
	template <> inline ScriptOrder::ErrorMessages GetParam<ScriptOrder::ErrorMessages> (HSQUIRRELVM vm, int index) { return (ScriptOrder::ErrorMessages) GetInteger (vm, index); }
	template <> inline void Push<ScriptOrder::ErrorMessages> (HSQUIRRELVM vm, ScriptOrder::ErrorMessages res) { sq_pushinteger (vm, (int32)res); }
	template <> inline ScriptOrder::ScriptOrderFlags GetParam<ScriptOrder::ScriptOrderFlags> (HSQUIRRELVM vm, int index) { return (ScriptOrder::ScriptOrderFlags) GetInteger (vm, index); }
	template <> inline void Push<ScriptOrder::ScriptOrderFlags> (HSQUIRRELVM vm, ScriptOrder::ScriptOrderFlags res) { sq_pushinteger (vm, (int32)res); }
	template <> inline ScriptOrder::OrderCondition GetParam<ScriptOrder::OrderCondition> (HSQUIRRELVM vm, int index) { return (ScriptOrder::OrderCondition) GetInteger (vm, index); }
	template <> inline void Push<ScriptOrder::OrderCondition> (HSQUIRRELVM vm, ScriptOrder::OrderCondition res) { sq_pushinteger (vm, (int32)res); }
	template <> inline ScriptOrder::CompareFunction GetParam<ScriptOrder::CompareFunction> (HSQUIRRELVM vm, int index) { return (ScriptOrder::CompareFunction) GetInteger (vm, index); }
	template <> inline void Push<ScriptOrder::CompareFunction> (HSQUIRRELVM vm, ScriptOrder::CompareFunction res) { sq_pushinteger (vm, (int32)res); }
	template <> inline ScriptOrder::OrderPosition GetParam<ScriptOrder::OrderPosition> (HSQUIRRELVM vm, int index) { return (ScriptOrder::OrderPosition) GetInteger (vm, index); }
	template <> inline void Push<ScriptOrder::OrderPosition> (HSQUIRRELVM vm, ScriptOrder::OrderPosition res) { sq_pushinteger (vm, (int32)res); }
	template <> inline ScriptOrder::StopLocation GetParam<ScriptOrder::StopLocation> (HSQUIRRELVM vm, int index) { return (ScriptOrder::StopLocation) GetInteger (vm, index); }
	template <> inline void Push<ScriptOrder::StopLocation> (HSQUIRRELVM vm, ScriptOrder::StopLocation res) { sq_pushinteger (vm, (int32)res); }

	/* Allow ScriptOrder to be used as Squirrel parameter */
	template <> inline       ScriptOrder *GetParam<ScriptOrder*> (HSQUIRRELVM vm, int index) { return  GetUserPointer<ScriptOrder> (vm, index); }
	template <> inline       ScriptOrder &GetParam<ScriptOrder&> (HSQUIRRELVM vm, int index) { return *GetUserPointer<ScriptOrder> (vm, index); }
	template <> inline const ScriptOrder *GetParam<const ScriptOrder*> (HSQUIRRELVM vm, int index) { return  GetUserPointer<ScriptOrder> (vm, index); }
	template <> inline const ScriptOrder &GetParam<const ScriptOrder&> (HSQUIRRELVM vm, int index) { return *GetUserPointer<ScriptOrder> (vm, index); }
	template <> inline void Push<ScriptOrder *> (HSQUIRRELVM vm, ScriptOrder *res) { PushObj<ScriptOrder> (vm, res, "Order", true); }
} // namespace SQConvert
