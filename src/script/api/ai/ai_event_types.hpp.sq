/* $Id$ */

/*
 * This file is part of OpenTTD.
 * OpenTTD is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * OpenTTD is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with OpenTTD. If not, see <http://www.gnu.org/licenses/>.
 */

/* THIS FILE IS AUTO-GENERATED; PLEASE DO NOT ALTER MANUALLY */

#include "../script_event_types.hpp"


template <> const char *GetClassName<ScriptEventVehicleCrashed, ST_AI>() { return "AIEventVehicleCrashed"; }

static void SQAIEventVehicleCrashed_Register (Squirrel *engine)
{
	engine->AddClassBegin (GetClassName <ScriptEventVehicleCrashed, ST_AI> (), "AIEvent");

	engine->AddConst ("CRASH_TRAIN",               ScriptEventVehicleCrashed::CRASH_TRAIN);
	engine->AddConst ("CRASH_RV_LEVEL_CROSSING",   ScriptEventVehicleCrashed::CRASH_RV_LEVEL_CROSSING);
	engine->AddConst ("CRASH_RV_UFO",              ScriptEventVehicleCrashed::CRASH_RV_UFO);
	engine->AddConst ("CRASH_PLANE_LANDING",       ScriptEventVehicleCrashed::CRASH_PLANE_LANDING);
	engine->AddConst ("CRASH_AIRCRAFT_NO_AIRPORT", ScriptEventVehicleCrashed::CRASH_AIRCRAFT_NO_AIRPORT);
	engine->AddConst ("CRASH_FLOODED",             ScriptEventVehicleCrashed::CRASH_FLOODED);

	SQConvert::DefSQStaticMethod (engine, &ScriptEventVehicleCrashed::Convert, "Convert", 2, ".x");

	SQConvert::DefSQMethod <ScriptEventVehicleCrashed, ST_AI> (engine, &ScriptEventVehicleCrashed::GetVehicleID,   "GetVehicleID",   1, "x");
	SQConvert::DefSQMethod <ScriptEventVehicleCrashed, ST_AI> (engine, &ScriptEventVehicleCrashed::GetCrashSite,   "GetCrashSite",   1, "x");
	SQConvert::DefSQMethod <ScriptEventVehicleCrashed, ST_AI> (engine, &ScriptEventVehicleCrashed::GetCrashReason, "GetCrashReason", 1, "x");

	engine->AddClassEnd();
}


template <> const char *GetClassName<ScriptEventSubsidyOffer, ST_AI>() { return "AIEventSubsidyOffer"; }

static void SQAIEventSubsidyOffer_Register (Squirrel *engine)
{
	engine->AddClassBegin (GetClassName <ScriptEventSubsidyOffer, ST_AI> (), "AIEvent");

	SQConvert::DefSQStaticMethod (engine, &ScriptEventSubsidyOffer::Convert, "Convert", 2, ".x");

	SQConvert::DefSQMethod <ScriptEventSubsidyOffer, ST_AI> (engine, &ScriptEventSubsidyOffer::GetSubsidyID, "GetSubsidyID", 1, "x");

	engine->AddClassEnd();
}


template <> const char *GetClassName<ScriptEventSubsidyOfferExpired, ST_AI>() { return "AIEventSubsidyOfferExpired"; }

static void SQAIEventSubsidyOfferExpired_Register (Squirrel *engine)
{
	engine->AddClassBegin (GetClassName <ScriptEventSubsidyOfferExpired, ST_AI> (), "AIEvent");

	SQConvert::DefSQStaticMethod (engine, &ScriptEventSubsidyOfferExpired::Convert, "Convert", 2, ".x");

	SQConvert::DefSQMethod <ScriptEventSubsidyOfferExpired, ST_AI> (engine, &ScriptEventSubsidyOfferExpired::GetSubsidyID, "GetSubsidyID", 1, "x");

	engine->AddClassEnd();
}


template <> const char *GetClassName<ScriptEventSubsidyAwarded, ST_AI>() { return "AIEventSubsidyAwarded"; }

static void SQAIEventSubsidyAwarded_Register (Squirrel *engine)
{
	engine->AddClassBegin (GetClassName <ScriptEventSubsidyAwarded, ST_AI> (), "AIEvent");

	SQConvert::DefSQStaticMethod (engine, &ScriptEventSubsidyAwarded::Convert, "Convert", 2, ".x");

	SQConvert::DefSQMethod <ScriptEventSubsidyAwarded, ST_AI> (engine, &ScriptEventSubsidyAwarded::GetSubsidyID, "GetSubsidyID", 1, "x");

	engine->AddClassEnd();
}


template <> const char *GetClassName<ScriptEventSubsidyExpired, ST_AI>() { return "AIEventSubsidyExpired"; }

static void SQAIEventSubsidyExpired_Register (Squirrel *engine)
{
	engine->AddClassBegin (GetClassName <ScriptEventSubsidyExpired, ST_AI> (), "AIEvent");

	SQConvert::DefSQStaticMethod (engine, &ScriptEventSubsidyExpired::Convert, "Convert", 2, ".x");

	SQConvert::DefSQMethod <ScriptEventSubsidyExpired, ST_AI> (engine, &ScriptEventSubsidyExpired::GetSubsidyID, "GetSubsidyID", 1, "x");

	engine->AddClassEnd();
}


template <> const char *GetClassName<ScriptEventEnginePreview, ST_AI>() { return "AIEventEnginePreview"; }

static void SQAIEventEnginePreview_Register (Squirrel *engine)
{
	engine->AddClassBegin (GetClassName <ScriptEventEnginePreview, ST_AI> (), "AIEvent");

	SQConvert::DefSQStaticMethod (engine, &ScriptEventEnginePreview::Convert, "Convert", 2, ".x");

	SQConvert::DefSQMethod <ScriptEventEnginePreview, ST_AI> (engine, &ScriptEventEnginePreview::GetName,        "GetName",        1, "x");
	SQConvert::DefSQMethod <ScriptEventEnginePreview, ST_AI> (engine, &ScriptEventEnginePreview::GetCargoType,   "GetCargoType",   1, "x");
	SQConvert::DefSQMethod <ScriptEventEnginePreview, ST_AI> (engine, &ScriptEventEnginePreview::GetCapacity,    "GetCapacity",    1, "x");
	SQConvert::DefSQMethod <ScriptEventEnginePreview, ST_AI> (engine, &ScriptEventEnginePreview::GetMaxSpeed,    "GetMaxSpeed",    1, "x");
	SQConvert::DefSQMethod <ScriptEventEnginePreview, ST_AI> (engine, &ScriptEventEnginePreview::GetPrice,       "GetPrice",       1, "x");
	SQConvert::DefSQMethod <ScriptEventEnginePreview, ST_AI> (engine, &ScriptEventEnginePreview::GetRunningCost, "GetRunningCost", 1, "x");
	SQConvert::DefSQMethod <ScriptEventEnginePreview, ST_AI> (engine, &ScriptEventEnginePreview::GetVehicleType, "GetVehicleType", 1, "x");
	SQConvert::DefSQMethod <ScriptEventEnginePreview, ST_AI> (engine, &ScriptEventEnginePreview::AcceptPreview,  "AcceptPreview",  1, "x");

	engine->AddClassEnd();
}


template <> const char *GetClassName<ScriptEventCompanyNew, ST_AI>() { return "AIEventCompanyNew"; }

static void SQAIEventCompanyNew_Register (Squirrel *engine)
{
	engine->AddClassBegin (GetClassName <ScriptEventCompanyNew, ST_AI> (), "AIEvent");

	SQConvert::DefSQStaticMethod (engine, &ScriptEventCompanyNew::Convert, "Convert", 2, ".x");

	SQConvert::DefSQMethod <ScriptEventCompanyNew, ST_AI> (engine, &ScriptEventCompanyNew::GetCompanyID, "GetCompanyID", 1, "x");

	engine->AddClassEnd();
}


template <> const char *GetClassName<ScriptEventCompanyInTrouble, ST_AI>() { return "AIEventCompanyInTrouble"; }

static void SQAIEventCompanyInTrouble_Register (Squirrel *engine)
{
	engine->AddClassBegin (GetClassName <ScriptEventCompanyInTrouble, ST_AI> (), "AIEvent");

	SQConvert::DefSQStaticMethod (engine, &ScriptEventCompanyInTrouble::Convert, "Convert", 2, ".x");

	SQConvert::DefSQMethod <ScriptEventCompanyInTrouble, ST_AI> (engine, &ScriptEventCompanyInTrouble::GetCompanyID, "GetCompanyID", 1, "x");

	engine->AddClassEnd();
}


template <> const char *GetClassName<ScriptEventCompanyAskMerger, ST_AI>() { return "AIEventCompanyAskMerger"; }

static void SQAIEventCompanyAskMerger_Register (Squirrel *engine)
{
	engine->AddClassBegin (GetClassName <ScriptEventCompanyAskMerger, ST_AI> (), "AIEvent");

	SQConvert::DefSQStaticMethod (engine, &ScriptEventCompanyAskMerger::Convert, "Convert", 2, ".x");

	SQConvert::DefSQMethod <ScriptEventCompanyAskMerger, ST_AI> (engine, &ScriptEventCompanyAskMerger::GetCompanyID, "GetCompanyID", 1, "x");
	SQConvert::DefSQMethod <ScriptEventCompanyAskMerger, ST_AI> (engine, &ScriptEventCompanyAskMerger::GetValue,     "GetValue",     1, "x");
	SQConvert::DefSQMethod <ScriptEventCompanyAskMerger, ST_AI> (engine, &ScriptEventCompanyAskMerger::AcceptMerger, "AcceptMerger", 1, "x");

	engine->AddClassEnd();
}


template <> const char *GetClassName<ScriptEventCompanyMerger, ST_AI>() { return "AIEventCompanyMerger"; }

static void SQAIEventCompanyMerger_Register (Squirrel *engine)
{
	engine->AddClassBegin (GetClassName <ScriptEventCompanyMerger, ST_AI> (), "AIEvent");

	SQConvert::DefSQStaticMethod (engine, &ScriptEventCompanyMerger::Convert, "Convert", 2, ".x");

	SQConvert::DefSQMethod <ScriptEventCompanyMerger, ST_AI> (engine, &ScriptEventCompanyMerger::GetOldCompanyID, "GetOldCompanyID", 1, "x");
	SQConvert::DefSQMethod <ScriptEventCompanyMerger, ST_AI> (engine, &ScriptEventCompanyMerger::GetNewCompanyID, "GetNewCompanyID", 1, "x");

	engine->AddClassEnd();
}


template <> const char *GetClassName<ScriptEventCompanyBankrupt, ST_AI>() { return "AIEventCompanyBankrupt"; }

static void SQAIEventCompanyBankrupt_Register (Squirrel *engine)
{
	engine->AddClassBegin (GetClassName <ScriptEventCompanyBankrupt, ST_AI> (), "AIEvent");

	SQConvert::DefSQStaticMethod (engine, &ScriptEventCompanyBankrupt::Convert, "Convert", 2, ".x");

	SQConvert::DefSQMethod <ScriptEventCompanyBankrupt, ST_AI> (engine, &ScriptEventCompanyBankrupt::GetCompanyID, "GetCompanyID", 1, "x");

	engine->AddClassEnd();
}


template <> const char *GetClassName<ScriptEventVehicleLost, ST_AI>() { return "AIEventVehicleLost"; }

static void SQAIEventVehicleLost_Register (Squirrel *engine)
{
	engine->AddClassBegin (GetClassName <ScriptEventVehicleLost, ST_AI> (), "AIEvent");

	SQConvert::DefSQStaticMethod (engine, &ScriptEventVehicleLost::Convert, "Convert", 2, ".x");

	SQConvert::DefSQMethod <ScriptEventVehicleLost, ST_AI> (engine, &ScriptEventVehicleLost::GetVehicleID, "GetVehicleID", 1, "x");

	engine->AddClassEnd();
}


template <> const char *GetClassName<ScriptEventVehicleWaitingInDepot, ST_AI>() { return "AIEventVehicleWaitingInDepot"; }

static void SQAIEventVehicleWaitingInDepot_Register (Squirrel *engine)
{
	engine->AddClassBegin (GetClassName <ScriptEventVehicleWaitingInDepot, ST_AI> (), "AIEvent");

	SQConvert::DefSQStaticMethod (engine, &ScriptEventVehicleWaitingInDepot::Convert, "Convert", 2, ".x");

	SQConvert::DefSQMethod <ScriptEventVehicleWaitingInDepot, ST_AI> (engine, &ScriptEventVehicleWaitingInDepot::GetVehicleID, "GetVehicleID", 1, "x");

	engine->AddClassEnd();
}


template <> const char *GetClassName<ScriptEventVehicleUnprofitable, ST_AI>() { return "AIEventVehicleUnprofitable"; }

static void SQAIEventVehicleUnprofitable_Register (Squirrel *engine)
{
	engine->AddClassBegin (GetClassName <ScriptEventVehicleUnprofitable, ST_AI> (), "AIEvent");

	SQConvert::DefSQStaticMethod (engine, &ScriptEventVehicleUnprofitable::Convert, "Convert", 2, ".x");

	SQConvert::DefSQMethod <ScriptEventVehicleUnprofitable, ST_AI> (engine, &ScriptEventVehicleUnprofitable::GetVehicleID, "GetVehicleID", 1, "x");

	engine->AddClassEnd();
}


template <> const char *GetClassName<ScriptEventIndustryOpen, ST_AI>() { return "AIEventIndustryOpen"; }

static void SQAIEventIndustryOpen_Register (Squirrel *engine)
{
	engine->AddClassBegin (GetClassName <ScriptEventIndustryOpen, ST_AI> (), "AIEvent");

	SQConvert::DefSQStaticMethod (engine, &ScriptEventIndustryOpen::Convert, "Convert", 2, ".x");

	SQConvert::DefSQMethod <ScriptEventIndustryOpen, ST_AI> (engine, &ScriptEventIndustryOpen::GetIndustryID, "GetIndustryID", 1, "x");

	engine->AddClassEnd();
}


template <> const char *GetClassName<ScriptEventIndustryClose, ST_AI>() { return "AIEventIndustryClose"; }

static void SQAIEventIndustryClose_Register (Squirrel *engine)
{
	engine->AddClassBegin (GetClassName <ScriptEventIndustryClose, ST_AI> (), "AIEvent");

	SQConvert::DefSQStaticMethod (engine, &ScriptEventIndustryClose::Convert, "Convert", 2, ".x");

	SQConvert::DefSQMethod <ScriptEventIndustryClose, ST_AI> (engine, &ScriptEventIndustryClose::GetIndustryID, "GetIndustryID", 1, "x");

	engine->AddClassEnd();
}


template <> const char *GetClassName<ScriptEventEngineAvailable, ST_AI>() { return "AIEventEngineAvailable"; }

static void SQAIEventEngineAvailable_Register (Squirrel *engine)
{
	engine->AddClassBegin (GetClassName <ScriptEventEngineAvailable, ST_AI> (), "AIEvent");

	SQConvert::DefSQStaticMethod (engine, &ScriptEventEngineAvailable::Convert, "Convert", 2, ".x");

	SQConvert::DefSQMethod <ScriptEventEngineAvailable, ST_AI> (engine, &ScriptEventEngineAvailable::GetEngineID, "GetEngineID", 1, "x");

	engine->AddClassEnd();
}


template <> const char *GetClassName<ScriptEventStationFirstVehicle, ST_AI>() { return "AIEventStationFirstVehicle"; }

static void SQAIEventStationFirstVehicle_Register (Squirrel *engine)
{
	engine->AddClassBegin (GetClassName <ScriptEventStationFirstVehicle, ST_AI> (), "AIEvent");

	SQConvert::DefSQStaticMethod (engine, &ScriptEventStationFirstVehicle::Convert, "Convert", 2, ".x");

	SQConvert::DefSQMethod <ScriptEventStationFirstVehicle, ST_AI> (engine, &ScriptEventStationFirstVehicle::GetStationID, "GetStationID", 1, "x");
	SQConvert::DefSQMethod <ScriptEventStationFirstVehicle, ST_AI> (engine, &ScriptEventStationFirstVehicle::GetVehicleID, "GetVehicleID", 1, "x");

	engine->AddClassEnd();
}


template <> const char *GetClassName<ScriptEventDisasterZeppelinerCrashed, ST_AI>() { return "AIEventDisasterZeppelinerCrashed"; }

static void SQAIEventDisasterZeppelinerCrashed_Register (Squirrel *engine)
{
	engine->AddClassBegin (GetClassName <ScriptEventDisasterZeppelinerCrashed, ST_AI> (), "AIEvent");

	SQConvert::DefSQStaticMethod (engine, &ScriptEventDisasterZeppelinerCrashed::Convert, "Convert", 2, ".x");

	SQConvert::DefSQMethod <ScriptEventDisasterZeppelinerCrashed, ST_AI> (engine, &ScriptEventDisasterZeppelinerCrashed::GetStationID, "GetStationID", 1, "x");

	engine->AddClassEnd();
}


template <> const char *GetClassName<ScriptEventDisasterZeppelinerCleared, ST_AI>() { return "AIEventDisasterZeppelinerCleared"; }

static void SQAIEventDisasterZeppelinerCleared_Register (Squirrel *engine)
{
	engine->AddClassBegin (GetClassName <ScriptEventDisasterZeppelinerCleared, ST_AI> (), "AIEvent");

	SQConvert::DefSQStaticMethod (engine, &ScriptEventDisasterZeppelinerCleared::Convert, "Convert", 2, ".x");

	SQConvert::DefSQMethod <ScriptEventDisasterZeppelinerCleared, ST_AI> (engine, &ScriptEventDisasterZeppelinerCleared::GetStationID, "GetStationID", 1, "x");

	engine->AddClassEnd();
}


template <> const char *GetClassName<ScriptEventTownFounded, ST_AI>() { return "AIEventTownFounded"; }

static void SQAIEventTownFounded_Register (Squirrel *engine)
{
	engine->AddClassBegin (GetClassName <ScriptEventTownFounded, ST_AI> (), "AIEvent");

	SQConvert::DefSQStaticMethod (engine, &ScriptEventTownFounded::Convert, "Convert", 2, ".x");

	SQConvert::DefSQMethod <ScriptEventTownFounded, ST_AI> (engine, &ScriptEventTownFounded::GetTownID, "GetTownID", 1, "x");

	engine->AddClassEnd();
}


template <> const char *GetClassName<ScriptEventAircraftDestTooFar, ST_AI>() { return "AIEventAircraftDestTooFar"; }

static void SQAIEventAircraftDestTooFar_Register (Squirrel *engine)
{
	engine->AddClassBegin (GetClassName <ScriptEventAircraftDestTooFar, ST_AI> (), "AIEvent");

	SQConvert::DefSQStaticMethod (engine, &ScriptEventAircraftDestTooFar::Convert, "Convert", 2, ".x");

	SQConvert::DefSQMethod <ScriptEventAircraftDestTooFar, ST_AI> (engine, &ScriptEventAircraftDestTooFar::GetVehicleID, "GetVehicleID", 1, "x");

	engine->AddClassEnd();
}


template <> const char *GetClassName<ScriptEventCompanyTown, ST_AI>() { return "AIEventCompanyTown"; }

static void SQAIEventCompanyTown_Register (Squirrel *engine)
{
	engine->AddClassBegin (GetClassName <ScriptEventCompanyTown, ST_AI> (), "AIEvent");

	SQConvert::DefSQStaticMethod (engine, &ScriptEventCompanyTown::Convert, "Convert", 2, ".x");

	SQConvert::DefSQMethod <ScriptEventCompanyTown, ST_AI> (engine, &ScriptEventCompanyTown::GetCompanyID, "GetCompanyID", 1, "x");
	SQConvert::DefSQMethod <ScriptEventCompanyTown, ST_AI> (engine, &ScriptEventCompanyTown::GetTownID,    "GetTownID",    1, "x");

	engine->AddClassEnd();
}


template <> const char *GetClassName<ScriptEventExclusiveTransportRights, ST_AI>() { return "AIEventExclusiveTransportRights"; }

static void SQAIEventExclusiveTransportRights_Register (Squirrel *engine)
{
	engine->AddClassBegin (GetClassName <ScriptEventExclusiveTransportRights, ST_AI> (), "AIEventCompanyTown");
	SQConvert::AddConstructor <ScriptEventExclusiveTransportRights, void (ScriptEventExclusiveTransportRights::*)(ScriptCompany::CompanyID company, TownID town), 3> (engine, "xii");

	SQConvert::DefSQStaticMethod (engine, &ScriptEventExclusiveTransportRights::Convert, "Convert", 2, ".x");

	engine->AddClassEnd();
}


template <> const char *GetClassName<ScriptEventRoadReconstruction, ST_AI>() { return "AIEventRoadReconstruction"; }

static void SQAIEventRoadReconstruction_Register (Squirrel *engine)
{
	engine->AddClassBegin (GetClassName <ScriptEventRoadReconstruction, ST_AI> (), "AIEventCompanyTown");
	SQConvert::AddConstructor <ScriptEventRoadReconstruction, void (ScriptEventRoadReconstruction::*)(ScriptCompany::CompanyID company, TownID town), 3> (engine, "xii");

	SQConvert::DefSQStaticMethod (engine, &ScriptEventRoadReconstruction::Convert, "Convert", 2, ".x");

	engine->AddClassEnd();
}
