/* $Id$ */

/*
 * This file is part of OpenTTD.
 * OpenTTD is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * OpenTTD is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with OpenTTD. If not, see <http://www.gnu.org/licenses/>.
 */

/* THIS FILE IS AUTO-GENERATED; PLEASE DO NOT ALTER MANUALLY */

#include "../script_station.hpp"

namespace SQConvert {
	/* Allow enums to be used as Squirrel parameters */
	template <> inline ScriptStation::ErrorMessages GetParam<ScriptStation::ErrorMessages> (HSQUIRRELVM vm, int index) { return (ScriptStation::ErrorMessages) GetInteger (vm, index); }
	template <> inline void Push<ScriptStation::ErrorMessages> (HSQUIRRELVM vm, ScriptStation::ErrorMessages res) { sq_pushinteger (vm, (int32)res); }
	template <> inline ScriptStation::StationType GetParam<ScriptStation::StationType> (HSQUIRRELVM vm, int index) { return (ScriptStation::StationType) GetInteger (vm, index); }
	template <> inline void Push<ScriptStation::StationType> (HSQUIRRELVM vm, ScriptStation::StationType res) { sq_pushinteger (vm, (int32)res); }

	/* Allow ScriptStation to be used as Squirrel parameter */
	template <> inline       ScriptStation *GetParam<ScriptStation*> (HSQUIRRELVM vm, int index) { return  GetUserPointer<ScriptStation> (vm, index); }
	template <> inline       ScriptStation &GetParam<ScriptStation&> (HSQUIRRELVM vm, int index) { return *GetUserPointer<ScriptStation> (vm, index); }
	template <> inline const ScriptStation *GetParam<const ScriptStation*> (HSQUIRRELVM vm, int index) { return  GetUserPointer<ScriptStation> (vm, index); }
	template <> inline const ScriptStation &GetParam<const ScriptStation&> (HSQUIRRELVM vm, int index) { return *GetUserPointer<ScriptStation> (vm, index); }
	template <> inline void Push<ScriptStation *> (HSQUIRRELVM vm, ScriptStation *res) { PushObj<ScriptStation> (vm, res, "Station", true); }
} // namespace SQConvert
