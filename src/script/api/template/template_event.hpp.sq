/* $Id$ */

/*
 * This file is part of OpenTTD.
 * OpenTTD is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * OpenTTD is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with OpenTTD. If not, see <http://www.gnu.org/licenses/>.
 */

/* THIS FILE IS AUTO-GENERATED; PLEASE DO NOT ALTER MANUALLY */

#include "../script_event.hpp"

namespace SQConvert {
	/* Allow enums to be used as Squirrel parameters */
	template <> inline ScriptEvent::ScriptEventType GetParam<ScriptEvent::ScriptEventType> (HSQUIRRELVM vm, int index) { return (ScriptEvent::ScriptEventType) GetInteger (vm, index); }
	template <> inline void Push<ScriptEvent::ScriptEventType> (HSQUIRRELVM vm, ScriptEvent::ScriptEventType res) { sq_pushinteger (vm, (int32)res); }

	/* Allow ScriptEvent to be used as Squirrel parameter */
	template <> inline       ScriptEvent *GetParam<ScriptEvent*> (HSQUIRRELVM vm, int index) { return  GetUserPointer<ScriptEvent> (vm, index); }
	template <> inline       ScriptEvent &GetParam<ScriptEvent&> (HSQUIRRELVM vm, int index) { return *GetUserPointer<ScriptEvent> (vm, index); }
	template <> inline const ScriptEvent *GetParam<const ScriptEvent*> (HSQUIRRELVM vm, int index) { return  GetUserPointer<ScriptEvent> (vm, index); }
	template <> inline const ScriptEvent &GetParam<const ScriptEvent&> (HSQUIRRELVM vm, int index) { return *GetUserPointer<ScriptEvent> (vm, index); }
	template <> inline void Push<ScriptEvent *> (HSQUIRRELVM vm, ScriptEvent *res) { PushObj<ScriptEvent> (vm, res, "Event", false); }
} // namespace SQConvert

namespace SQConvert {
	/* Allow ScriptEventController to be used as Squirrel parameter */
	template <> inline       ScriptEventController *GetParam<ScriptEventController*> (HSQUIRRELVM vm, int index) { return  GetUserPointer<ScriptEventController> (vm, index); }
	template <> inline       ScriptEventController &GetParam<ScriptEventController&> (HSQUIRRELVM vm, int index) { return *GetUserPointer<ScriptEventController> (vm, index); }
	template <> inline const ScriptEventController *GetParam<const ScriptEventController*> (HSQUIRRELVM vm, int index) { return  GetUserPointer<ScriptEventController> (vm, index); }
	template <> inline const ScriptEventController &GetParam<const ScriptEventController&> (HSQUIRRELVM vm, int index) { return *GetUserPointer<ScriptEventController> (vm, index); }
	template <> inline void Push<ScriptEventController *> (HSQUIRRELVM vm, ScriptEventController *res) { PushObj<ScriptEventController> (vm, res, "EventController", true); }
} // namespace SQConvert
