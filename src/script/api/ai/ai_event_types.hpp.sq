/* $Id$ */

/*
 * This file is part of OpenTTD.
 * OpenTTD is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * OpenTTD is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with OpenTTD. If not, see <http://www.gnu.org/licenses/>.
 */

/* THIS FILE IS AUTO-GENERATED; PLEASE DO NOT ALTER MANUALLY */

#include "../script_event_types.hpp"


static void SQAIEventVehicleCrashed_Register (Squirrel *engine)
{
	engine->AddClassBegin ("AIEventVehicleCrashed", "AIEvent");

	engine->AddConst ("CRASH_TRAIN",               ScriptEventVehicleCrashed::CRASH_TRAIN);
	engine->AddConst ("CRASH_RV_LEVEL_CROSSING",   ScriptEventVehicleCrashed::CRASH_RV_LEVEL_CROSSING);
	engine->AddConst ("CRASH_RV_UFO",              ScriptEventVehicleCrashed::CRASH_RV_UFO);
	engine->AddConst ("CRASH_PLANE_LANDING",       ScriptEventVehicleCrashed::CRASH_PLANE_LANDING);
	engine->AddConst ("CRASH_AIRCRAFT_NO_AIRPORT", ScriptEventVehicleCrashed::CRASH_AIRCRAFT_NO_AIRPORT);
	engine->AddConst ("CRASH_FLOODED",             ScriptEventVehicleCrashed::CRASH_FLOODED);

	SQConvert::DefSQStaticMethod (engine, &ScriptEventVehicleCrashed::Convert, "Convert", 2, ".x");

	SQConvert::DefSQMethod (engine, "AIEventVehicleCrashed", &ScriptEventVehicleCrashed::GetVehicleID,   "GetVehicleID",   1, "x");
	SQConvert::DefSQMethod (engine, "AIEventVehicleCrashed", &ScriptEventVehicleCrashed::GetCrashSite,   "GetCrashSite",   1, "x");
	SQConvert::DefSQMethod (engine, "AIEventVehicleCrashed", &ScriptEventVehicleCrashed::GetCrashReason, "GetCrashReason", 1, "x");

	engine->AddClassEnd();
}


static void SQAIEventSubsidyOffer_Register (Squirrel *engine)
{
	engine->AddClassBegin ("AIEventSubsidyOffer", "AIEvent");

	SQConvert::DefSQStaticMethod (engine, &ScriptEventSubsidyOffer::Convert, "Convert", 2, ".x");

	SQConvert::DefSQMethod (engine, "AIEventSubsidyOffer", &ScriptEventSubsidyOffer::GetSubsidyID, "GetSubsidyID", 1, "x");

	engine->AddClassEnd();
}


static void SQAIEventSubsidyOfferExpired_Register (Squirrel *engine)
{
	engine->AddClassBegin ("AIEventSubsidyOfferExpired", "AIEvent");

	SQConvert::DefSQStaticMethod (engine, &ScriptEventSubsidyOfferExpired::Convert, "Convert", 2, ".x");

	SQConvert::DefSQMethod (engine, "AIEventSubsidyOfferExpired", &ScriptEventSubsidyOfferExpired::GetSubsidyID, "GetSubsidyID", 1, "x");

	engine->AddClassEnd();
}


static void SQAIEventSubsidyAwarded_Register (Squirrel *engine)
{
	engine->AddClassBegin ("AIEventSubsidyAwarded", "AIEvent");

	SQConvert::DefSQStaticMethod (engine, &ScriptEventSubsidyAwarded::Convert, "Convert", 2, ".x");

	SQConvert::DefSQMethod (engine, "AIEventSubsidyAwarded", &ScriptEventSubsidyAwarded::GetSubsidyID, "GetSubsidyID", 1, "x");

	engine->AddClassEnd();
}


static void SQAIEventSubsidyExpired_Register (Squirrel *engine)
{
	engine->AddClassBegin ("AIEventSubsidyExpired", "AIEvent");

	SQConvert::DefSQStaticMethod (engine, &ScriptEventSubsidyExpired::Convert, "Convert", 2, ".x");

	SQConvert::DefSQMethod (engine, "AIEventSubsidyExpired", &ScriptEventSubsidyExpired::GetSubsidyID, "GetSubsidyID", 1, "x");

	engine->AddClassEnd();
}


static void SQAIEventEnginePreview_Register (Squirrel *engine)
{
	engine->AddClassBegin ("AIEventEnginePreview", "AIEvent");

	SQConvert::DefSQStaticMethod (engine, &ScriptEventEnginePreview::Convert, "Convert", 2, ".x");

	SQConvert::DefSQMethod (engine, "AIEventEnginePreview", &ScriptEventEnginePreview::GetName,        "GetName",        1, "x");
	SQConvert::DefSQMethod (engine, "AIEventEnginePreview", &ScriptEventEnginePreview::GetCargoType,   "GetCargoType",   1, "x");
	SQConvert::DefSQMethod (engine, "AIEventEnginePreview", &ScriptEventEnginePreview::GetCapacity,    "GetCapacity",    1, "x");
	SQConvert::DefSQMethod (engine, "AIEventEnginePreview", &ScriptEventEnginePreview::GetMaxSpeed,    "GetMaxSpeed",    1, "x");
	SQConvert::DefSQMethod (engine, "AIEventEnginePreview", &ScriptEventEnginePreview::GetPrice,       "GetPrice",       1, "x");
	SQConvert::DefSQMethod (engine, "AIEventEnginePreview", &ScriptEventEnginePreview::GetRunningCost, "GetRunningCost", 1, "x");
	SQConvert::DefSQMethod (engine, "AIEventEnginePreview", &ScriptEventEnginePreview::GetVehicleType, "GetVehicleType", 1, "x");
	SQConvert::DefSQMethod (engine, "AIEventEnginePreview", &ScriptEventEnginePreview::AcceptPreview,  "AcceptPreview",  1, "x");

	engine->AddClassEnd();
}


static void SQAIEventCompanyNew_Register (Squirrel *engine)
{
	engine->AddClassBegin ("AIEventCompanyNew", "AIEvent");

	SQConvert::DefSQStaticMethod (engine, &ScriptEventCompanyNew::Convert, "Convert", 2, ".x");

	SQConvert::DefSQMethod (engine, "AIEventCompanyNew", &ScriptEventCompanyNew::GetCompanyID, "GetCompanyID", 1, "x");

	engine->AddClassEnd();
}


static void SQAIEventCompanyInTrouble_Register (Squirrel *engine)
{
	engine->AddClassBegin ("AIEventCompanyInTrouble", "AIEvent");

	SQConvert::DefSQStaticMethod (engine, &ScriptEventCompanyInTrouble::Convert, "Convert", 2, ".x");

	SQConvert::DefSQMethod (engine, "AIEventCompanyInTrouble", &ScriptEventCompanyInTrouble::GetCompanyID, "GetCompanyID", 1, "x");

	engine->AddClassEnd();
}


static void SQAIEventCompanyAskMerger_Register (Squirrel *engine)
{
	engine->AddClassBegin ("AIEventCompanyAskMerger", "AIEvent");

	SQConvert::DefSQStaticMethod (engine, &ScriptEventCompanyAskMerger::Convert, "Convert", 2, ".x");

	SQConvert::DefSQMethod (engine, "AIEventCompanyAskMerger", &ScriptEventCompanyAskMerger::GetCompanyID, "GetCompanyID", 1, "x");
	SQConvert::DefSQMethod (engine, "AIEventCompanyAskMerger", &ScriptEventCompanyAskMerger::GetValue,     "GetValue",     1, "x");
	SQConvert::DefSQMethod (engine, "AIEventCompanyAskMerger", &ScriptEventCompanyAskMerger::AcceptMerger, "AcceptMerger", 1, "x");

	engine->AddClassEnd();
}


static void SQAIEventCompanyMerger_Register (Squirrel *engine)
{
	engine->AddClassBegin ("AIEventCompanyMerger", "AIEvent");

	SQConvert::DefSQStaticMethod (engine, &ScriptEventCompanyMerger::Convert, "Convert", 2, ".x");

	SQConvert::DefSQMethod (engine, "AIEventCompanyMerger", &ScriptEventCompanyMerger::GetOldCompanyID, "GetOldCompanyID", 1, "x");
	SQConvert::DefSQMethod (engine, "AIEventCompanyMerger", &ScriptEventCompanyMerger::GetNewCompanyID, "GetNewCompanyID", 1, "x");

	engine->AddClassEnd();
}


static void SQAIEventCompanyBankrupt_Register (Squirrel *engine)
{
	engine->AddClassBegin ("AIEventCompanyBankrupt", "AIEvent");

	SQConvert::DefSQStaticMethod (engine, &ScriptEventCompanyBankrupt::Convert, "Convert", 2, ".x");

	SQConvert::DefSQMethod (engine, "AIEventCompanyBankrupt", &ScriptEventCompanyBankrupt::GetCompanyID, "GetCompanyID", 1, "x");

	engine->AddClassEnd();
}


static void SQAIEventVehicleLost_Register (Squirrel *engine)
{
	engine->AddClassBegin ("AIEventVehicleLost", "AIEvent");

	SQConvert::DefSQStaticMethod (engine, &ScriptEventVehicleLost::Convert, "Convert", 2, ".x");

	SQConvert::DefSQMethod (engine, "AIEventVehicleLost", &ScriptEventVehicleLost::GetVehicleID, "GetVehicleID", 1, "x");

	engine->AddClassEnd();
}


static void SQAIEventVehicleWaitingInDepot_Register (Squirrel *engine)
{
	engine->AddClassBegin ("AIEventVehicleWaitingInDepot", "AIEvent");

	SQConvert::DefSQStaticMethod (engine, &ScriptEventVehicleWaitingInDepot::Convert, "Convert", 2, ".x");

	SQConvert::DefSQMethod (engine, "AIEventVehicleWaitingInDepot", &ScriptEventVehicleWaitingInDepot::GetVehicleID, "GetVehicleID", 1, "x");

	engine->AddClassEnd();
}


static void SQAIEventVehicleUnprofitable_Register (Squirrel *engine)
{
	engine->AddClassBegin ("AIEventVehicleUnprofitable", "AIEvent");

	SQConvert::DefSQStaticMethod (engine, &ScriptEventVehicleUnprofitable::Convert, "Convert", 2, ".x");

	SQConvert::DefSQMethod (engine, "AIEventVehicleUnprofitable", &ScriptEventVehicleUnprofitable::GetVehicleID, "GetVehicleID", 1, "x");

	engine->AddClassEnd();
}


static void SQAIEventIndustryOpen_Register (Squirrel *engine)
{
	engine->AddClassBegin ("AIEventIndustryOpen", "AIEvent");

	SQConvert::DefSQStaticMethod (engine, &ScriptEventIndustryOpen::Convert, "Convert", 2, ".x");

	SQConvert::DefSQMethod (engine, "AIEventIndustryOpen", &ScriptEventIndustryOpen::GetIndustryID, "GetIndustryID", 1, "x");

	engine->AddClassEnd();
}


static void SQAIEventIndustryClose_Register (Squirrel *engine)
{
	engine->AddClassBegin ("AIEventIndustryClose", "AIEvent");

	SQConvert::DefSQStaticMethod (engine, &ScriptEventIndustryClose::Convert, "Convert", 2, ".x");

	SQConvert::DefSQMethod (engine, "AIEventIndustryClose", &ScriptEventIndustryClose::GetIndustryID, "GetIndustryID", 1, "x");

	engine->AddClassEnd();
}


static void SQAIEventEngineAvailable_Register (Squirrel *engine)
{
	engine->AddClassBegin ("AIEventEngineAvailable", "AIEvent");

	SQConvert::DefSQStaticMethod (engine, &ScriptEventEngineAvailable::Convert, "Convert", 2, ".x");

	SQConvert::DefSQMethod (engine, "AIEventEngineAvailable", &ScriptEventEngineAvailable::GetEngineID, "GetEngineID", 1, "x");

	engine->AddClassEnd();
}


static void SQAIEventStationFirstVehicle_Register (Squirrel *engine)
{
	engine->AddClassBegin ("AIEventStationFirstVehicle", "AIEvent");

	SQConvert::DefSQStaticMethod (engine, &ScriptEventStationFirstVehicle::Convert, "Convert", 2, ".x");

	SQConvert::DefSQMethod (engine, "AIEventStationFirstVehicle", &ScriptEventStationFirstVehicle::GetStationID, "GetStationID", 1, "x");
	SQConvert::DefSQMethod (engine, "AIEventStationFirstVehicle", &ScriptEventStationFirstVehicle::GetVehicleID, "GetVehicleID", 1, "x");

	engine->AddClassEnd();
}


static void SQAIEventDisasterZeppelinerCrashed_Register (Squirrel *engine)
{
	engine->AddClassBegin ("AIEventDisasterZeppelinerCrashed", "AIEvent");

	SQConvert::DefSQStaticMethod (engine, &ScriptEventDisasterZeppelinerCrashed::Convert, "Convert", 2, ".x");

	SQConvert::DefSQMethod (engine, "AIEventDisasterZeppelinerCrashed", &ScriptEventDisasterZeppelinerCrashed::GetStationID, "GetStationID", 1, "x");

	engine->AddClassEnd();
}


static void SQAIEventDisasterZeppelinerCleared_Register (Squirrel *engine)
{
	engine->AddClassBegin ("AIEventDisasterZeppelinerCleared", "AIEvent");

	SQConvert::DefSQStaticMethod (engine, &ScriptEventDisasterZeppelinerCleared::Convert, "Convert", 2, ".x");

	SQConvert::DefSQMethod (engine, "AIEventDisasterZeppelinerCleared", &ScriptEventDisasterZeppelinerCleared::GetStationID, "GetStationID", 1, "x");

	engine->AddClassEnd();
}


static void SQAIEventTownFounded_Register (Squirrel *engine)
{
	engine->AddClassBegin ("AIEventTownFounded", "AIEvent");

	SQConvert::DefSQStaticMethod (engine, &ScriptEventTownFounded::Convert, "Convert", 2, ".x");

	SQConvert::DefSQMethod (engine, "AIEventTownFounded", &ScriptEventTownFounded::GetTownID, "GetTownID", 1, "x");

	engine->AddClassEnd();
}


static void SQAIEventAircraftDestTooFar_Register (Squirrel *engine)
{
	engine->AddClassBegin ("AIEventAircraftDestTooFar", "AIEvent");

	SQConvert::DefSQStaticMethod (engine, &ScriptEventAircraftDestTooFar::Convert, "Convert", 2, ".x");

	SQConvert::DefSQMethod (engine, "AIEventAircraftDestTooFar", &ScriptEventAircraftDestTooFar::GetVehicleID, "GetVehicleID", 1, "x");

	engine->AddClassEnd();
}


static void SQAIEventCompanyTown_Register (Squirrel *engine)
{
	engine->AddClassBegin ("AIEventCompanyTown", "AIEvent");

	SQConvert::DefSQStaticMethod (engine, &ScriptEventCompanyTown::Convert, "Convert", 2, ".x");

	SQConvert::DefSQMethod (engine, "AIEventCompanyTown", &ScriptEventCompanyTown::GetCompanyID, "GetCompanyID", 1, "x");
	SQConvert::DefSQMethod (engine, "AIEventCompanyTown", &ScriptEventCompanyTown::GetTownID,    "GetTownID",    1, "x");

	engine->AddClassEnd();
}


static void SQAIEventExclusiveTransportRights_Register (Squirrel *engine)
{
	engine->AddClassBegin ("AIEventExclusiveTransportRights", "AIEventCompanyTown");
	SQConvert::AddConstructor <void (ScriptEventExclusiveTransportRights::*)(ScriptCompany::CompanyID company, TownID town), 3> (engine, "xii");

	SQConvert::DefSQStaticMethod (engine, &ScriptEventExclusiveTransportRights::Convert, "Convert", 2, ".x");

	engine->AddClassEnd();
}


static void SQAIEventRoadReconstruction_Register (Squirrel *engine)
{
	engine->AddClassBegin ("AIEventRoadReconstruction", "AIEventCompanyTown");
	SQConvert::AddConstructor <void (ScriptEventRoadReconstruction::*)(ScriptCompany::CompanyID company, TownID town), 3> (engine, "xii");

	SQConvert::DefSQStaticMethod (engine, &ScriptEventRoadReconstruction::Convert, "Convert", 2, ".x");

	engine->AddClassEnd();
}
