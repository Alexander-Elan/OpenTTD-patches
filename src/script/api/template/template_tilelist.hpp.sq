/* $Id$ */

/*
 * This file is part of OpenTTD.
 * OpenTTD is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * OpenTTD is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with OpenTTD. If not, see <http://www.gnu.org/licenses/>.
 */

/* THIS FILE IS AUTO-GENERATED; PLEASE DO NOT ALTER MANUALLY */

#include "../script_tilelist.hpp"

namespace SQConvert {
	/* Allow ScriptTileList to be used as Squirrel parameter */
	template <> inline       ScriptTileList *GetParam<ScriptTileList*> (HSQUIRRELVM vm, int index) { return  GetUserPointer<ScriptTileList> (vm, index); }
	template <> inline       ScriptTileList &GetParam<ScriptTileList&> (HSQUIRRELVM vm, int index) { return *GetUserPointer<ScriptTileList> (vm, index); }
	template <> inline const ScriptTileList *GetParam<const ScriptTileList*> (HSQUIRRELVM vm, int index) { return  GetUserPointer<ScriptTileList> (vm, index); }
	template <> inline const ScriptTileList &GetParam<const ScriptTileList&> (HSQUIRRELVM vm, int index) { return *GetUserPointer<ScriptTileList> (vm, index); }
	template <> inline int Return<ScriptTileList *>(HSQUIRRELVM vm, ScriptTileList *res) { if (res == NULL) { sq_pushnull(vm); return 1; } res->AddRef(); Squirrel::CreateClassInstanceVM(vm, "TileList", res, NULL, DefSQDestructorCallback<ScriptTileList>, true); return 1; }
} // namespace SQConvert

namespace SQConvert {
	/* Allow ScriptTileList_IndustryAccepting to be used as Squirrel parameter */
	template <> inline       ScriptTileList_IndustryAccepting *GetParam<ScriptTileList_IndustryAccepting*> (HSQUIRRELVM vm, int index) { return  GetUserPointer<ScriptTileList_IndustryAccepting> (vm, index); }
	template <> inline       ScriptTileList_IndustryAccepting &GetParam<ScriptTileList_IndustryAccepting&> (HSQUIRRELVM vm, int index) { return *GetUserPointer<ScriptTileList_IndustryAccepting> (vm, index); }
	template <> inline const ScriptTileList_IndustryAccepting *GetParam<const ScriptTileList_IndustryAccepting*> (HSQUIRRELVM vm, int index) { return  GetUserPointer<ScriptTileList_IndustryAccepting> (vm, index); }
	template <> inline const ScriptTileList_IndustryAccepting &GetParam<const ScriptTileList_IndustryAccepting&> (HSQUIRRELVM vm, int index) { return *GetUserPointer<ScriptTileList_IndustryAccepting> (vm, index); }
	template <> inline int Return<ScriptTileList_IndustryAccepting *>(HSQUIRRELVM vm, ScriptTileList_IndustryAccepting *res) { if (res == NULL) { sq_pushnull(vm); return 1; } res->AddRef(); Squirrel::CreateClassInstanceVM(vm, "TileList_IndustryAccepting", res, NULL, DefSQDestructorCallback<ScriptTileList_IndustryAccepting>, true); return 1; }
} // namespace SQConvert

namespace SQConvert {
	/* Allow ScriptTileList_IndustryProducing to be used as Squirrel parameter */
	template <> inline       ScriptTileList_IndustryProducing *GetParam<ScriptTileList_IndustryProducing*> (HSQUIRRELVM vm, int index) { return  GetUserPointer<ScriptTileList_IndustryProducing> (vm, index); }
	template <> inline       ScriptTileList_IndustryProducing &GetParam<ScriptTileList_IndustryProducing&> (HSQUIRRELVM vm, int index) { return *GetUserPointer<ScriptTileList_IndustryProducing> (vm, index); }
	template <> inline const ScriptTileList_IndustryProducing *GetParam<const ScriptTileList_IndustryProducing*> (HSQUIRRELVM vm, int index) { return  GetUserPointer<ScriptTileList_IndustryProducing> (vm, index); }
	template <> inline const ScriptTileList_IndustryProducing &GetParam<const ScriptTileList_IndustryProducing&> (HSQUIRRELVM vm, int index) { return *GetUserPointer<ScriptTileList_IndustryProducing> (vm, index); }
	template <> inline int Return<ScriptTileList_IndustryProducing *>(HSQUIRRELVM vm, ScriptTileList_IndustryProducing *res) { if (res == NULL) { sq_pushnull(vm); return 1; } res->AddRef(); Squirrel::CreateClassInstanceVM(vm, "TileList_IndustryProducing", res, NULL, DefSQDestructorCallback<ScriptTileList_IndustryProducing>, true); return 1; }
} // namespace SQConvert

namespace SQConvert {
	/* Allow ScriptTileList_StationType to be used as Squirrel parameter */
	template <> inline       ScriptTileList_StationType *GetParam<ScriptTileList_StationType*> (HSQUIRRELVM vm, int index) { return  GetUserPointer<ScriptTileList_StationType> (vm, index); }
	template <> inline       ScriptTileList_StationType &GetParam<ScriptTileList_StationType&> (HSQUIRRELVM vm, int index) { return *GetUserPointer<ScriptTileList_StationType> (vm, index); }
	template <> inline const ScriptTileList_StationType *GetParam<const ScriptTileList_StationType*> (HSQUIRRELVM vm, int index) { return  GetUserPointer<ScriptTileList_StationType> (vm, index); }
	template <> inline const ScriptTileList_StationType &GetParam<const ScriptTileList_StationType&> (HSQUIRRELVM vm, int index) { return *GetUserPointer<ScriptTileList_StationType> (vm, index); }
	template <> inline int Return<ScriptTileList_StationType *>(HSQUIRRELVM vm, ScriptTileList_StationType *res) { if (res == NULL) { sq_pushnull(vm); return 1; } res->AddRef(); Squirrel::CreateClassInstanceVM(vm, "TileList_StationType", res, NULL, DefSQDestructorCallback<ScriptTileList_StationType>, true); return 1; }
} // namespace SQConvert
