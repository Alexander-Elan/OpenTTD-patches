/* $Id$ */

/*
 * This file is part of OpenTTD.
 * OpenTTD is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * OpenTTD is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with OpenTTD. If not, see <http://www.gnu.org/licenses/>.
 */

/* THIS FILE IS AUTO-GENERATED; PLEASE DO NOT ALTER MANUALLY */

#include "../script_rail.hpp"

namespace SQConvert {
	/* Allow enums to be used as Squirrel parameters */
	template <> inline Param<ScriptRail::ErrorMessages>::Param (HSQUIRRELVM vm, int index) : data ((ScriptRail::ErrorMessages) GetInteger (vm, index)) { }
	template <> inline int Return<ScriptRail::ErrorMessages>(HSQUIRRELVM vm, ScriptRail::ErrorMessages res) { sq_pushinteger(vm, (int32)res); return 1; }
	template <> inline Param<ScriptRail::RailType>::Param (HSQUIRRELVM vm, int index) : data ((ScriptRail::RailType) GetInteger (vm, index)) { }
	template <> inline int Return<ScriptRail::RailType>(HSQUIRRELVM vm, ScriptRail::RailType res) { sq_pushinteger(vm, (int32)res); return 1; }
	template <> inline Param<ScriptRail::RailTrack>::Param (HSQUIRRELVM vm, int index) : data ((ScriptRail::RailTrack) GetInteger (vm, index)) { }
	template <> inline int Return<ScriptRail::RailTrack>(HSQUIRRELVM vm, ScriptRail::RailTrack res) { sq_pushinteger(vm, (int32)res); return 1; }
	template <> inline Param<ScriptRail::SignalType>::Param (HSQUIRRELVM vm, int index) : data ((ScriptRail::SignalType) GetInteger (vm, index)) { }
	template <> inline int Return<ScriptRail::SignalType>(HSQUIRRELVM vm, ScriptRail::SignalType res) { sq_pushinteger(vm, (int32)res); return 1; }
	template <> inline Param<ScriptRail::BuildType>::Param (HSQUIRRELVM vm, int index) : data ((ScriptRail::BuildType) GetInteger (vm, index)) { }
	template <> inline int Return<ScriptRail::BuildType>(HSQUIRRELVM vm, ScriptRail::BuildType res) { sq_pushinteger(vm, (int32)res); return 1; }

	/* Allow ScriptRail to be used as Squirrel parameter */
	template <> inline Param<ScriptRail*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptRail> (vm, index)) { }
	template <> inline Param<ScriptRail&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptRail> (vm, index)) { }
	template <> inline Param<const ScriptRail*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptRail> (vm, index)) { }
	template <> inline Param<const ScriptRail&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptRail> (vm, index)) { }
	template <> inline int Return<ScriptRail *>(HSQUIRRELVM vm, ScriptRail *res) { if (res == NULL) { sq_pushnull(vm); return 1; } res->AddRef(); Squirrel::CreateClassInstanceVM(vm, "Rail", res, NULL, DefSQDestructorCallback<ScriptRail>, true); return 1; }
} // namespace SQConvert
