/* $Id$ */

/*
 * This file is part of OpenTTD.
 * OpenTTD is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * OpenTTD is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with OpenTTD. If not, see <http://www.gnu.org/licenses/>.
 */

/* THIS FILE IS AUTO-GENERATED; PLEASE DO NOT ALTER MANUALLY */

#include "../script_road.hpp"

namespace SQConvert {
	/* Allow enums to be used as Squirrel parameters */
	template <> inline ScriptRoad::ErrorMessages GetParam<ScriptRoad::ErrorMessages> (HSQUIRRELVM vm, int index) { return (ScriptRoad::ErrorMessages) GetInteger (vm, index); }
	template <> inline int Return<ScriptRoad::ErrorMessages>(HSQUIRRELVM vm, ScriptRoad::ErrorMessages res) { sq_pushinteger(vm, (int32)res); return 1; }
	template <> inline ScriptRoad::RoadType GetParam<ScriptRoad::RoadType> (HSQUIRRELVM vm, int index) { return (ScriptRoad::RoadType) GetInteger (vm, index); }
	template <> inline int Return<ScriptRoad::RoadType>(HSQUIRRELVM vm, ScriptRoad::RoadType res) { sq_pushinteger(vm, (int32)res); return 1; }
	template <> inline ScriptRoad::RoadVehicleType GetParam<ScriptRoad::RoadVehicleType> (HSQUIRRELVM vm, int index) { return (ScriptRoad::RoadVehicleType) GetInteger (vm, index); }
	template <> inline int Return<ScriptRoad::RoadVehicleType>(HSQUIRRELVM vm, ScriptRoad::RoadVehicleType res) { sq_pushinteger(vm, (int32)res); return 1; }
	template <> inline ScriptRoad::BuildType GetParam<ScriptRoad::BuildType> (HSQUIRRELVM vm, int index) { return (ScriptRoad::BuildType) GetInteger (vm, index); }
	template <> inline int Return<ScriptRoad::BuildType>(HSQUIRRELVM vm, ScriptRoad::BuildType res) { sq_pushinteger(vm, (int32)res); return 1; }

	/* Allow ScriptRoad to be used as Squirrel parameter */
	template <> inline       ScriptRoad *GetParam<ScriptRoad*> (HSQUIRRELVM vm, int index) { return  GetUserPointer<ScriptRoad> (vm, index); }
	template <> inline       ScriptRoad &GetParam<ScriptRoad&> (HSQUIRRELVM vm, int index) { return *GetUserPointer<ScriptRoad> (vm, index); }
	template <> inline const ScriptRoad *GetParam<const ScriptRoad*> (HSQUIRRELVM vm, int index) { return  GetUserPointer<ScriptRoad> (vm, index); }
	template <> inline const ScriptRoad &GetParam<const ScriptRoad&> (HSQUIRRELVM vm, int index) { return *GetUserPointer<ScriptRoad> (vm, index); }
	template <> inline int Return<ScriptRoad *>(HSQUIRRELVM vm, ScriptRoad *res) { if (res == NULL) { sq_pushnull(vm); return 1; } res->AddRef(); Squirrel::CreateClassInstanceVM(vm, "Road", res, NULL, DefSQDestructorCallback<ScriptRoad>, true); return 1; }
} // namespace SQConvert
