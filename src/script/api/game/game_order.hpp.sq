/* $Id$ */

/*
 * This file is part of OpenTTD.
 * OpenTTD is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * OpenTTD is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with OpenTTD. If not, see <http://www.gnu.org/licenses/>.
 */

/* THIS FILE IS AUTO-GENERATED; PLEASE DO NOT ALTER MANUALLY */

#include "../script_order.hpp"


template <> const char *GetClassName<ScriptOrder, ST_GS>() { return "GSOrder"; }

static void SQGSOrder_Register (Squirrel *engine)
{
	engine->AddClassBegin (GetClassName <ScriptOrder, ST_GS> ());
	SQConvert::AddConstructor <ScriptOrder, void (ScriptOrder::*)(), 1> (engine, "x");

	engine->AddConst ("ERR_ORDER_BASE",                                   ScriptOrder::ERR_ORDER_BASE);
	engine->AddConst ("ERR_ORDER_TOO_MANY",                               ScriptOrder::ERR_ORDER_TOO_MANY);
	engine->AddConst ("ERR_ORDER_TOO_FAR_AWAY_FROM_PREVIOUS_DESTINATION", ScriptOrder::ERR_ORDER_TOO_FAR_AWAY_FROM_PREVIOUS_DESTINATION);
	engine->AddConst ("ERR_ORDER_AIRCRAFT_NOT_ENOUGH_RANGE",              ScriptOrder::ERR_ORDER_AIRCRAFT_NOT_ENOUGH_RANGE);
	engine->AddConst ("OF_NONE",                                          ScriptOrder::OF_NONE);
	engine->AddConst ("OF_NON_STOP_INTERMEDIATE",                         ScriptOrder::OF_NON_STOP_INTERMEDIATE);
	engine->AddConst ("OF_NON_STOP_DESTINATION",                          ScriptOrder::OF_NON_STOP_DESTINATION);
	engine->AddConst ("OF_UNLOAD",                                        ScriptOrder::OF_UNLOAD);
	engine->AddConst ("OF_TRANSFER",                                      ScriptOrder::OF_TRANSFER);
	engine->AddConst ("OF_NO_UNLOAD",                                     ScriptOrder::OF_NO_UNLOAD);
	engine->AddConst ("OF_FULL_LOAD",                                     ScriptOrder::OF_FULL_LOAD);
	engine->AddConst ("OF_FULL_LOAD_ANY",                                 ScriptOrder::OF_FULL_LOAD_ANY);
	engine->AddConst ("OF_NO_LOAD",                                       ScriptOrder::OF_NO_LOAD);
	engine->AddConst ("OF_SERVICE_IF_NEEDED",                             ScriptOrder::OF_SERVICE_IF_NEEDED);
	engine->AddConst ("OF_STOP_IN_DEPOT",                                 ScriptOrder::OF_STOP_IN_DEPOT);
	engine->AddConst ("OF_GOTO_NEAREST_DEPOT",                            ScriptOrder::OF_GOTO_NEAREST_DEPOT);
	engine->AddConst ("OF_NON_STOP_FLAGS",                                ScriptOrder::OF_NON_STOP_FLAGS);
	engine->AddConst ("OF_UNLOAD_FLAGS",                                  ScriptOrder::OF_UNLOAD_FLAGS);
	engine->AddConst ("OF_LOAD_FLAGS",                                    ScriptOrder::OF_LOAD_FLAGS);
	engine->AddConst ("OF_DEPOT_FLAGS",                                   ScriptOrder::OF_DEPOT_FLAGS);
	engine->AddConst ("OF_INVALID",                                       ScriptOrder::OF_INVALID);
	engine->AddConst ("OC_LOAD_PERCENTAGE",                               ScriptOrder::OC_LOAD_PERCENTAGE);
	engine->AddConst ("OC_RELIABILITY",                                   ScriptOrder::OC_RELIABILITY);
	engine->AddConst ("OC_MAX_SPEED",                                     ScriptOrder::OC_MAX_SPEED);
	engine->AddConst ("OC_AGE",                                           ScriptOrder::OC_AGE);
	engine->AddConst ("OC_REQUIRES_SERVICE",                              ScriptOrder::OC_REQUIRES_SERVICE);
	engine->AddConst ("OC_UNCONDITIONALLY",                               ScriptOrder::OC_UNCONDITIONALLY);
	engine->AddConst ("OC_REMAINING_LIFETIME",                            ScriptOrder::OC_REMAINING_LIFETIME);
	engine->AddConst ("OC_INVALID",                                       ScriptOrder::OC_INVALID);
	engine->AddConst ("CF_EQUALS",                                        ScriptOrder::CF_EQUALS);
	engine->AddConst ("CF_NOT_EQUALS",                                    ScriptOrder::CF_NOT_EQUALS);
	engine->AddConst ("CF_LESS_THAN",                                     ScriptOrder::CF_LESS_THAN);
	engine->AddConst ("CF_LESS_EQUALS",                                   ScriptOrder::CF_LESS_EQUALS);
	engine->AddConst ("CF_MORE_THAN",                                     ScriptOrder::CF_MORE_THAN);
	engine->AddConst ("CF_MORE_EQUALS",                                   ScriptOrder::CF_MORE_EQUALS);
	engine->AddConst ("CF_IS_TRUE",                                       ScriptOrder::CF_IS_TRUE);
	engine->AddConst ("CF_IS_FALSE",                                      ScriptOrder::CF_IS_FALSE);
	engine->AddConst ("CF_INVALID",                                       ScriptOrder::CF_INVALID);
	engine->AddConst ("ORDER_CURRENT",                                    ScriptOrder::ORDER_CURRENT);
	engine->AddConst ("ORDER_INVALID",                                    ScriptOrder::ORDER_INVALID);
	engine->AddConst ("STOPLOCATION_NEAR",                                ScriptOrder::STOPLOCATION_NEAR);
	engine->AddConst ("STOPLOCATION_MIDDLE",                              ScriptOrder::STOPLOCATION_MIDDLE);
	engine->AddConst ("STOPLOCATION_FAR",                                 ScriptOrder::STOPLOCATION_FAR);
	engine->AddConst ("STOPLOCATION_INVALID",                             ScriptOrder::STOPLOCATION_INVALID);

	ScriptError::RegisterErrorMap(STR_ERROR_NO_MORE_SPACE_FOR_ORDERS,          ScriptOrder::ERR_ORDER_TOO_MANY);
	ScriptError::RegisterErrorMap(STR_ERROR_TOO_FAR_FROM_PREVIOUS_DESTINATION, ScriptOrder::ERR_ORDER_TOO_FAR_AWAY_FROM_PREVIOUS_DESTINATION);
	ScriptError::RegisterErrorMap(STR_ERROR_AIRCRAFT_NOT_ENOUGH_RANGE,         ScriptOrder::ERR_ORDER_AIRCRAFT_NOT_ENOUGH_RANGE);

	ScriptError::RegisterErrorMapString(ScriptOrder::ERR_ORDER_TOO_MANY,                               "ERR_ORDER_TOO_MANY");
	ScriptError::RegisterErrorMapString(ScriptOrder::ERR_ORDER_TOO_FAR_AWAY_FROM_PREVIOUS_DESTINATION, "ERR_ORDER_TOO_FAR_AWAY_FROM_PREVIOUS_DESTINATION");
	ScriptError::RegisterErrorMapString(ScriptOrder::ERR_ORDER_AIRCRAFT_NOT_ENOUGH_RANGE,              "ERR_ORDER_AIRCRAFT_NOT_ENOUGH_RANGE");

	SQConvert::DefSQStaticMethod (engine, &ScriptOrder::IsValidVehicleOrder,           "IsValidVehicleOrder",           3, ".ii");
	SQConvert::DefSQStaticMethod (engine, &ScriptOrder::IsGotoStationOrder,            "IsGotoStationOrder",            3, ".ii");
	SQConvert::DefSQStaticMethod (engine, &ScriptOrder::IsGotoDepotOrder,              "IsGotoDepotOrder",              3, ".ii");
	SQConvert::DefSQStaticMethod (engine, &ScriptOrder::IsGotoWaypointOrder,           "IsGotoWaypointOrder",           3, ".ii");
	SQConvert::DefSQStaticMethod (engine, &ScriptOrder::IsConditionalOrder,            "IsConditionalOrder",            3, ".ii");
	SQConvert::DefSQStaticMethod (engine, &ScriptOrder::IsVoidOrder,                   "IsVoidOrder",                   3, ".ii");
	SQConvert::DefSQStaticMethod (engine, &ScriptOrder::IsRefitOrder,                  "IsRefitOrder",                  3, ".ii");
	SQConvert::DefSQStaticMethod (engine, &ScriptOrder::IsCurrentOrderPartOfOrderList, "IsCurrentOrderPartOfOrderList", 2, ".i");
	SQConvert::DefSQStaticMethod (engine, &ScriptOrder::ResolveOrderPosition,          "ResolveOrderPosition",          3, ".ii");
	SQConvert::DefSQStaticMethod (engine, &ScriptOrder::AreOrderFlagsValid,            "AreOrderFlagsValid",            3, ".ii");
	SQConvert::DefSQStaticMethod (engine, &ScriptOrder::IsValidConditionalOrder,       "IsValidConditionalOrder",       3, ".ii");
	SQConvert::DefSQStaticMethod (engine, &ScriptOrder::GetOrderCount,                 "GetOrderCount",                 2, ".i");
	SQConvert::DefSQStaticMethod (engine, &ScriptOrder::GetOrderDestination,           "GetOrderDestination",           3, ".ii");
	SQConvert::DefSQStaticMethod (engine, &ScriptOrder::GetOrderFlags,                 "GetOrderFlags",                 3, ".ii");
	SQConvert::DefSQStaticMethod (engine, &ScriptOrder::GetOrderJumpTo,                "GetOrderJumpTo",                3, ".ii");
	SQConvert::DefSQStaticMethod (engine, &ScriptOrder::GetOrderCondition,             "GetOrderCondition",             3, ".ii");
	SQConvert::DefSQStaticMethod (engine, &ScriptOrder::GetOrderCompareFunction,       "GetOrderCompareFunction",       3, ".ii");
	SQConvert::DefSQStaticMethod (engine, &ScriptOrder::GetOrderCompareValue,          "GetOrderCompareValue",          3, ".ii");
	SQConvert::DefSQStaticMethod (engine, &ScriptOrder::GetStopLocation,               "GetStopLocation",               3, ".ii");
	SQConvert::DefSQStaticMethod (engine, &ScriptOrder::GetOrderRefit,                 "GetOrderRefit",                 3, ".ii");
	SQConvert::DefSQStaticMethod (engine, &ScriptOrder::GetOrderDistance,              "GetOrderDistance",              4, ".iii");

	engine->AddClassEnd();
}
