/* $Id$ */

/*
 * This file is part of OpenTTD.
 * OpenTTD is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * OpenTTD is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with OpenTTD. If not, see <http://www.gnu.org/licenses/>.
 */

/* THIS FILE IS AUTO-GENERATED; PLEASE DO NOT ALTER MANUALLY */

#include "../script_vehiclelist.hpp"

namespace SQConvert {
	/* Allow ScriptVehicleList to be used as Squirrel parameter */
	template <> inline Param<ScriptVehicleList*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptVehicleList> (vm, index)) { }
	template <> inline Param<ScriptVehicleList&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptVehicleList> (vm, index)) { }
	template <> inline Param<const ScriptVehicleList*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptVehicleList> (vm, index)) { }
	template <> inline Param<const ScriptVehicleList&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptVehicleList> (vm, index)) { }
	template <> inline int Return<ScriptVehicleList *>(HSQUIRRELVM vm, ScriptVehicleList *res) { if (res == NULL) { sq_pushnull(vm); return 1; } res->AddRef(); Squirrel::CreateClassInstanceVM(vm, "VehicleList", res, NULL, DefSQDestructorCallback<ScriptVehicleList>, true); return 1; }
} // namespace SQConvert

namespace SQConvert {
	/* Allow ScriptVehicleList_Station to be used as Squirrel parameter */
	template <> inline Param<ScriptVehicleList_Station*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptVehicleList_Station> (vm, index)) { }
	template <> inline Param<ScriptVehicleList_Station&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptVehicleList_Station> (vm, index)) { }
	template <> inline Param<const ScriptVehicleList_Station*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptVehicleList_Station> (vm, index)) { }
	template <> inline Param<const ScriptVehicleList_Station&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptVehicleList_Station> (vm, index)) { }
	template <> inline int Return<ScriptVehicleList_Station *>(HSQUIRRELVM vm, ScriptVehicleList_Station *res) { if (res == NULL) { sq_pushnull(vm); return 1; } res->AddRef(); Squirrel::CreateClassInstanceVM(vm, "VehicleList_Station", res, NULL, DefSQDestructorCallback<ScriptVehicleList_Station>, true); return 1; }
} // namespace SQConvert

namespace SQConvert {
	/* Allow ScriptVehicleList_Depot to be used as Squirrel parameter */
	template <> inline Param<ScriptVehicleList_Depot*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptVehicleList_Depot> (vm, index)) { }
	template <> inline Param<ScriptVehicleList_Depot&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptVehicleList_Depot> (vm, index)) { }
	template <> inline Param<const ScriptVehicleList_Depot*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptVehicleList_Depot> (vm, index)) { }
	template <> inline Param<const ScriptVehicleList_Depot&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptVehicleList_Depot> (vm, index)) { }
	template <> inline int Return<ScriptVehicleList_Depot *>(HSQUIRRELVM vm, ScriptVehicleList_Depot *res) { if (res == NULL) { sq_pushnull(vm); return 1; } res->AddRef(); Squirrel::CreateClassInstanceVM(vm, "VehicleList_Depot", res, NULL, DefSQDestructorCallback<ScriptVehicleList_Depot>, true); return 1; }
} // namespace SQConvert

namespace SQConvert {
	/* Allow ScriptVehicleList_SharedOrders to be used as Squirrel parameter */
	template <> inline Param<ScriptVehicleList_SharedOrders*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptVehicleList_SharedOrders> (vm, index)) { }
	template <> inline Param<ScriptVehicleList_SharedOrders&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptVehicleList_SharedOrders> (vm, index)) { }
	template <> inline Param<const ScriptVehicleList_SharedOrders*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptVehicleList_SharedOrders> (vm, index)) { }
	template <> inline Param<const ScriptVehicleList_SharedOrders&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptVehicleList_SharedOrders> (vm, index)) { }
	template <> inline int Return<ScriptVehicleList_SharedOrders *>(HSQUIRRELVM vm, ScriptVehicleList_SharedOrders *res) { if (res == NULL) { sq_pushnull(vm); return 1; } res->AddRef(); Squirrel::CreateClassInstanceVM(vm, "VehicleList_SharedOrders", res, NULL, DefSQDestructorCallback<ScriptVehicleList_SharedOrders>, true); return 1; }
} // namespace SQConvert

namespace SQConvert {
	/* Allow ScriptVehicleList_Group to be used as Squirrel parameter */
	template <> inline Param<ScriptVehicleList_Group*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptVehicleList_Group> (vm, index)) { }
	template <> inline Param<ScriptVehicleList_Group&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptVehicleList_Group> (vm, index)) { }
	template <> inline Param<const ScriptVehicleList_Group*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptVehicleList_Group> (vm, index)) { }
	template <> inline Param<const ScriptVehicleList_Group&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptVehicleList_Group> (vm, index)) { }
	template <> inline int Return<ScriptVehicleList_Group *>(HSQUIRRELVM vm, ScriptVehicleList_Group *res) { if (res == NULL) { sq_pushnull(vm); return 1; } res->AddRef(); Squirrel::CreateClassInstanceVM(vm, "VehicleList_Group", res, NULL, DefSQDestructorCallback<ScriptVehicleList_Group>, true); return 1; }
} // namespace SQConvert

namespace SQConvert {
	/* Allow ScriptVehicleList_DefaultGroup to be used as Squirrel parameter */
	template <> inline Param<ScriptVehicleList_DefaultGroup*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptVehicleList_DefaultGroup> (vm, index)) { }
	template <> inline Param<ScriptVehicleList_DefaultGroup&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptVehicleList_DefaultGroup> (vm, index)) { }
	template <> inline Param<const ScriptVehicleList_DefaultGroup*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptVehicleList_DefaultGroup> (vm, index)) { }
	template <> inline Param<const ScriptVehicleList_DefaultGroup&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptVehicleList_DefaultGroup> (vm, index)) { }
	template <> inline int Return<ScriptVehicleList_DefaultGroup *>(HSQUIRRELVM vm, ScriptVehicleList_DefaultGroup *res) { if (res == NULL) { sq_pushnull(vm); return 1; } res->AddRef(); Squirrel::CreateClassInstanceVM(vm, "VehicleList_DefaultGroup", res, NULL, DefSQDestructorCallback<ScriptVehicleList_DefaultGroup>, true); return 1; }
} // namespace SQConvert
