/* $Id$ */

/*
 * This file is part of OpenTTD.
 * OpenTTD is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * OpenTTD is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with OpenTTD. If not, see <http://www.gnu.org/licenses/>.
 */

/* THIS FILE IS AUTO-GENERATED; PLEASE DO NOT ALTER MANUALLY */

#include "../script_company.hpp"

namespace SQConvert {
	/* Allow enums to be used as Squirrel parameters */
	template <> inline ScriptCompany::Quarter GetParam<ScriptCompany::Quarter> (HSQUIRRELVM vm, int index) { return (ScriptCompany::Quarter) GetInteger (vm, index); }
	template <> inline int Return<ScriptCompany::Quarter>(HSQUIRRELVM vm, ScriptCompany::Quarter res) { sq_pushinteger(vm, (int32)res); return 1; }
	template <> inline ScriptCompany::CompanyID GetParam<ScriptCompany::CompanyID> (HSQUIRRELVM vm, int index) { return (ScriptCompany::CompanyID) GetInteger (vm, index); }
	template <> inline int Return<ScriptCompany::CompanyID>(HSQUIRRELVM vm, ScriptCompany::CompanyID res) { sq_pushinteger(vm, (int32)res); return 1; }
	template <> inline ScriptCompany::Gender GetParam<ScriptCompany::Gender> (HSQUIRRELVM vm, int index) { return (ScriptCompany::Gender) GetInteger (vm, index); }
	template <> inline int Return<ScriptCompany::Gender>(HSQUIRRELVM vm, ScriptCompany::Gender res) { sq_pushinteger(vm, (int32)res); return 1; }
	template <> inline ScriptCompany::ExpensesType GetParam<ScriptCompany::ExpensesType> (HSQUIRRELVM vm, int index) { return (ScriptCompany::ExpensesType) GetInteger (vm, index); }
	template <> inline int Return<ScriptCompany::ExpensesType>(HSQUIRRELVM vm, ScriptCompany::ExpensesType res) { sq_pushinteger(vm, (int32)res); return 1; }

	/* Allow ScriptCompany to be used as Squirrel parameter */
	template <> inline       ScriptCompany *GetParam<ScriptCompany*> (HSQUIRRELVM vm, int index) { return  GetUserPointer<ScriptCompany> (vm, index); }
	template <> inline       ScriptCompany &GetParam<ScriptCompany&> (HSQUIRRELVM vm, int index) { return *GetUserPointer<ScriptCompany> (vm, index); }
	template <> inline const ScriptCompany *GetParam<const ScriptCompany*> (HSQUIRRELVM vm, int index) { return  GetUserPointer<ScriptCompany> (vm, index); }
	template <> inline const ScriptCompany &GetParam<const ScriptCompany&> (HSQUIRRELVM vm, int index) { return *GetUserPointer<ScriptCompany> (vm, index); }
	template <> inline int Return<ScriptCompany *>(HSQUIRRELVM vm, ScriptCompany *res) { if (res == NULL) { sq_pushnull(vm); return 1; } res->AddRef(); Squirrel::CreateClassInstanceVM(vm, "Company", res, NULL, DefSQDestructorCallback<ScriptCompany>, true); return 1; }
} // namespace SQConvert
