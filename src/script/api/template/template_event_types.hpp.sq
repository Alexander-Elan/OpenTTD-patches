/* $Id$ */

/*
 * This file is part of OpenTTD.
 * OpenTTD is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * OpenTTD is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with OpenTTD. If not, see <http://www.gnu.org/licenses/>.
 */

/* THIS FILE IS AUTO-GENERATED; PLEASE DO NOT ALTER MANUALLY */

#include "../script_event_types.hpp"

namespace SQConvert {
	/* Allow enums to be used as Squirrel parameters */
	template <> inline Param<ScriptEventVehicleCrashed::CrashReason>::Param (HSQUIRRELVM vm, int index) : data ((ScriptEventVehicleCrashed::CrashReason) GetInteger (vm, index)) { }
	template <> inline int Return<ScriptEventVehicleCrashed::CrashReason>(HSQUIRRELVM vm, ScriptEventVehicleCrashed::CrashReason res) { sq_pushinteger(vm, (int32)res); return 1; }

	/* Allow ScriptEventVehicleCrashed to be used as Squirrel parameter */
	template <> inline Param<ScriptEventVehicleCrashed*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptEventVehicleCrashed> (vm, index)) { }
	template <> inline Param<ScriptEventVehicleCrashed&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptEventVehicleCrashed> (vm, index)) { }
	template <> inline Param<const ScriptEventVehicleCrashed*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptEventVehicleCrashed> (vm, index)) { }
	template <> inline Param<const ScriptEventVehicleCrashed&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptEventVehicleCrashed> (vm, index)) { }
	template <> inline int Return<ScriptEventVehicleCrashed *>(HSQUIRRELVM vm, ScriptEventVehicleCrashed *res) { if (res == NULL) { sq_pushnull(vm); return 1; } res->AddRef(); Squirrel::CreateClassInstanceVM(vm, "EventVehicleCrashed", res, NULL, DefSQDestructorCallback<ScriptEventVehicleCrashed>, true); return 1; }
} // namespace SQConvert

namespace SQConvert {
	/* Allow ScriptEventSubsidyOffer to be used as Squirrel parameter */
	template <> inline Param<ScriptEventSubsidyOffer*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptEventSubsidyOffer> (vm, index)) { }
	template <> inline Param<ScriptEventSubsidyOffer&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptEventSubsidyOffer> (vm, index)) { }
	template <> inline Param<const ScriptEventSubsidyOffer*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptEventSubsidyOffer> (vm, index)) { }
	template <> inline Param<const ScriptEventSubsidyOffer&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptEventSubsidyOffer> (vm, index)) { }
	template <> inline int Return<ScriptEventSubsidyOffer *>(HSQUIRRELVM vm, ScriptEventSubsidyOffer *res) { if (res == NULL) { sq_pushnull(vm); return 1; } res->AddRef(); Squirrel::CreateClassInstanceVM(vm, "EventSubsidyOffer", res, NULL, DefSQDestructorCallback<ScriptEventSubsidyOffer>, true); return 1; }
} // namespace SQConvert

namespace SQConvert {
	/* Allow ScriptEventSubsidyOfferExpired to be used as Squirrel parameter */
	template <> inline Param<ScriptEventSubsidyOfferExpired*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptEventSubsidyOfferExpired> (vm, index)) { }
	template <> inline Param<ScriptEventSubsidyOfferExpired&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptEventSubsidyOfferExpired> (vm, index)) { }
	template <> inline Param<const ScriptEventSubsidyOfferExpired*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptEventSubsidyOfferExpired> (vm, index)) { }
	template <> inline Param<const ScriptEventSubsidyOfferExpired&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptEventSubsidyOfferExpired> (vm, index)) { }
	template <> inline int Return<ScriptEventSubsidyOfferExpired *>(HSQUIRRELVM vm, ScriptEventSubsidyOfferExpired *res) { if (res == NULL) { sq_pushnull(vm); return 1; } res->AddRef(); Squirrel::CreateClassInstanceVM(vm, "EventSubsidyOfferExpired", res, NULL, DefSQDestructorCallback<ScriptEventSubsidyOfferExpired>, true); return 1; }
} // namespace SQConvert

namespace SQConvert {
	/* Allow ScriptEventSubsidyAwarded to be used as Squirrel parameter */
	template <> inline Param<ScriptEventSubsidyAwarded*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptEventSubsidyAwarded> (vm, index)) { }
	template <> inline Param<ScriptEventSubsidyAwarded&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptEventSubsidyAwarded> (vm, index)) { }
	template <> inline Param<const ScriptEventSubsidyAwarded*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptEventSubsidyAwarded> (vm, index)) { }
	template <> inline Param<const ScriptEventSubsidyAwarded&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptEventSubsidyAwarded> (vm, index)) { }
	template <> inline int Return<ScriptEventSubsidyAwarded *>(HSQUIRRELVM vm, ScriptEventSubsidyAwarded *res) { if (res == NULL) { sq_pushnull(vm); return 1; } res->AddRef(); Squirrel::CreateClassInstanceVM(vm, "EventSubsidyAwarded", res, NULL, DefSQDestructorCallback<ScriptEventSubsidyAwarded>, true); return 1; }
} // namespace SQConvert

namespace SQConvert {
	/* Allow ScriptEventSubsidyExpired to be used as Squirrel parameter */
	template <> inline Param<ScriptEventSubsidyExpired*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptEventSubsidyExpired> (vm, index)) { }
	template <> inline Param<ScriptEventSubsidyExpired&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptEventSubsidyExpired> (vm, index)) { }
	template <> inline Param<const ScriptEventSubsidyExpired*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptEventSubsidyExpired> (vm, index)) { }
	template <> inline Param<const ScriptEventSubsidyExpired&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptEventSubsidyExpired> (vm, index)) { }
	template <> inline int Return<ScriptEventSubsidyExpired *>(HSQUIRRELVM vm, ScriptEventSubsidyExpired *res) { if (res == NULL) { sq_pushnull(vm); return 1; } res->AddRef(); Squirrel::CreateClassInstanceVM(vm, "EventSubsidyExpired", res, NULL, DefSQDestructorCallback<ScriptEventSubsidyExpired>, true); return 1; }
} // namespace SQConvert

namespace SQConvert {
	/* Allow ScriptEventEnginePreview to be used as Squirrel parameter */
	template <> inline Param<ScriptEventEnginePreview*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptEventEnginePreview> (vm, index)) { }
	template <> inline Param<ScriptEventEnginePreview&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptEventEnginePreview> (vm, index)) { }
	template <> inline Param<const ScriptEventEnginePreview*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptEventEnginePreview> (vm, index)) { }
	template <> inline Param<const ScriptEventEnginePreview&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptEventEnginePreview> (vm, index)) { }
	template <> inline int Return<ScriptEventEnginePreview *>(HSQUIRRELVM vm, ScriptEventEnginePreview *res) { if (res == NULL) { sq_pushnull(vm); return 1; } res->AddRef(); Squirrel::CreateClassInstanceVM(vm, "EventEnginePreview", res, NULL, DefSQDestructorCallback<ScriptEventEnginePreview>, true); return 1; }
} // namespace SQConvert

namespace SQConvert {
	/* Allow ScriptEventCompanyNew to be used as Squirrel parameter */
	template <> inline Param<ScriptEventCompanyNew*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptEventCompanyNew> (vm, index)) { }
	template <> inline Param<ScriptEventCompanyNew&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptEventCompanyNew> (vm, index)) { }
	template <> inline Param<const ScriptEventCompanyNew*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptEventCompanyNew> (vm, index)) { }
	template <> inline Param<const ScriptEventCompanyNew&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptEventCompanyNew> (vm, index)) { }
	template <> inline int Return<ScriptEventCompanyNew *>(HSQUIRRELVM vm, ScriptEventCompanyNew *res) { if (res == NULL) { sq_pushnull(vm); return 1; } res->AddRef(); Squirrel::CreateClassInstanceVM(vm, "EventCompanyNew", res, NULL, DefSQDestructorCallback<ScriptEventCompanyNew>, true); return 1; }
} // namespace SQConvert

namespace SQConvert {
	/* Allow ScriptEventCompanyInTrouble to be used as Squirrel parameter */
	template <> inline Param<ScriptEventCompanyInTrouble*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptEventCompanyInTrouble> (vm, index)) { }
	template <> inline Param<ScriptEventCompanyInTrouble&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptEventCompanyInTrouble> (vm, index)) { }
	template <> inline Param<const ScriptEventCompanyInTrouble*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptEventCompanyInTrouble> (vm, index)) { }
	template <> inline Param<const ScriptEventCompanyInTrouble&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptEventCompanyInTrouble> (vm, index)) { }
	template <> inline int Return<ScriptEventCompanyInTrouble *>(HSQUIRRELVM vm, ScriptEventCompanyInTrouble *res) { if (res == NULL) { sq_pushnull(vm); return 1; } res->AddRef(); Squirrel::CreateClassInstanceVM(vm, "EventCompanyInTrouble", res, NULL, DefSQDestructorCallback<ScriptEventCompanyInTrouble>, true); return 1; }
} // namespace SQConvert

namespace SQConvert {
	/* Allow ScriptEventCompanyAskMerger to be used as Squirrel parameter */
	template <> inline Param<ScriptEventCompanyAskMerger*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptEventCompanyAskMerger> (vm, index)) { }
	template <> inline Param<ScriptEventCompanyAskMerger&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptEventCompanyAskMerger> (vm, index)) { }
	template <> inline Param<const ScriptEventCompanyAskMerger*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptEventCompanyAskMerger> (vm, index)) { }
	template <> inline Param<const ScriptEventCompanyAskMerger&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptEventCompanyAskMerger> (vm, index)) { }
	template <> inline int Return<ScriptEventCompanyAskMerger *>(HSQUIRRELVM vm, ScriptEventCompanyAskMerger *res) { if (res == NULL) { sq_pushnull(vm); return 1; } res->AddRef(); Squirrel::CreateClassInstanceVM(vm, "EventCompanyAskMerger", res, NULL, DefSQDestructorCallback<ScriptEventCompanyAskMerger>, true); return 1; }
} // namespace SQConvert

namespace SQConvert {
	/* Allow ScriptEventCompanyMerger to be used as Squirrel parameter */
	template <> inline Param<ScriptEventCompanyMerger*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptEventCompanyMerger> (vm, index)) { }
	template <> inline Param<ScriptEventCompanyMerger&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptEventCompanyMerger> (vm, index)) { }
	template <> inline Param<const ScriptEventCompanyMerger*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptEventCompanyMerger> (vm, index)) { }
	template <> inline Param<const ScriptEventCompanyMerger&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptEventCompanyMerger> (vm, index)) { }
	template <> inline int Return<ScriptEventCompanyMerger *>(HSQUIRRELVM vm, ScriptEventCompanyMerger *res) { if (res == NULL) { sq_pushnull(vm); return 1; } res->AddRef(); Squirrel::CreateClassInstanceVM(vm, "EventCompanyMerger", res, NULL, DefSQDestructorCallback<ScriptEventCompanyMerger>, true); return 1; }
} // namespace SQConvert

namespace SQConvert {
	/* Allow ScriptEventCompanyBankrupt to be used as Squirrel parameter */
	template <> inline Param<ScriptEventCompanyBankrupt*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptEventCompanyBankrupt> (vm, index)) { }
	template <> inline Param<ScriptEventCompanyBankrupt&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptEventCompanyBankrupt> (vm, index)) { }
	template <> inline Param<const ScriptEventCompanyBankrupt*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptEventCompanyBankrupt> (vm, index)) { }
	template <> inline Param<const ScriptEventCompanyBankrupt&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptEventCompanyBankrupt> (vm, index)) { }
	template <> inline int Return<ScriptEventCompanyBankrupt *>(HSQUIRRELVM vm, ScriptEventCompanyBankrupt *res) { if (res == NULL) { sq_pushnull(vm); return 1; } res->AddRef(); Squirrel::CreateClassInstanceVM(vm, "EventCompanyBankrupt", res, NULL, DefSQDestructorCallback<ScriptEventCompanyBankrupt>, true); return 1; }
} // namespace SQConvert

namespace SQConvert {
	/* Allow ScriptEventVehicleLost to be used as Squirrel parameter */
	template <> inline Param<ScriptEventVehicleLost*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptEventVehicleLost> (vm, index)) { }
	template <> inline Param<ScriptEventVehicleLost&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptEventVehicleLost> (vm, index)) { }
	template <> inline Param<const ScriptEventVehicleLost*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptEventVehicleLost> (vm, index)) { }
	template <> inline Param<const ScriptEventVehicleLost&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptEventVehicleLost> (vm, index)) { }
	template <> inline int Return<ScriptEventVehicleLost *>(HSQUIRRELVM vm, ScriptEventVehicleLost *res) { if (res == NULL) { sq_pushnull(vm); return 1; } res->AddRef(); Squirrel::CreateClassInstanceVM(vm, "EventVehicleLost", res, NULL, DefSQDestructorCallback<ScriptEventVehicleLost>, true); return 1; }
} // namespace SQConvert

namespace SQConvert {
	/* Allow ScriptEventVehicleWaitingInDepot to be used as Squirrel parameter */
	template <> inline Param<ScriptEventVehicleWaitingInDepot*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptEventVehicleWaitingInDepot> (vm, index)) { }
	template <> inline Param<ScriptEventVehicleWaitingInDepot&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptEventVehicleWaitingInDepot> (vm, index)) { }
	template <> inline Param<const ScriptEventVehicleWaitingInDepot*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptEventVehicleWaitingInDepot> (vm, index)) { }
	template <> inline Param<const ScriptEventVehicleWaitingInDepot&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptEventVehicleWaitingInDepot> (vm, index)) { }
	template <> inline int Return<ScriptEventVehicleWaitingInDepot *>(HSQUIRRELVM vm, ScriptEventVehicleWaitingInDepot *res) { if (res == NULL) { sq_pushnull(vm); return 1; } res->AddRef(); Squirrel::CreateClassInstanceVM(vm, "EventVehicleWaitingInDepot", res, NULL, DefSQDestructorCallback<ScriptEventVehicleWaitingInDepot>, true); return 1; }
} // namespace SQConvert

namespace SQConvert {
	/* Allow ScriptEventVehicleUnprofitable to be used as Squirrel parameter */
	template <> inline Param<ScriptEventVehicleUnprofitable*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptEventVehicleUnprofitable> (vm, index)) { }
	template <> inline Param<ScriptEventVehicleUnprofitable&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptEventVehicleUnprofitable> (vm, index)) { }
	template <> inline Param<const ScriptEventVehicleUnprofitable*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptEventVehicleUnprofitable> (vm, index)) { }
	template <> inline Param<const ScriptEventVehicleUnprofitable&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptEventVehicleUnprofitable> (vm, index)) { }
	template <> inline int Return<ScriptEventVehicleUnprofitable *>(HSQUIRRELVM vm, ScriptEventVehicleUnprofitable *res) { if (res == NULL) { sq_pushnull(vm); return 1; } res->AddRef(); Squirrel::CreateClassInstanceVM(vm, "EventVehicleUnprofitable", res, NULL, DefSQDestructorCallback<ScriptEventVehicleUnprofitable>, true); return 1; }
} // namespace SQConvert

namespace SQConvert {
	/* Allow ScriptEventIndustryOpen to be used as Squirrel parameter */
	template <> inline Param<ScriptEventIndustryOpen*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptEventIndustryOpen> (vm, index)) { }
	template <> inline Param<ScriptEventIndustryOpen&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptEventIndustryOpen> (vm, index)) { }
	template <> inline Param<const ScriptEventIndustryOpen*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptEventIndustryOpen> (vm, index)) { }
	template <> inline Param<const ScriptEventIndustryOpen&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptEventIndustryOpen> (vm, index)) { }
	template <> inline int Return<ScriptEventIndustryOpen *>(HSQUIRRELVM vm, ScriptEventIndustryOpen *res) { if (res == NULL) { sq_pushnull(vm); return 1; } res->AddRef(); Squirrel::CreateClassInstanceVM(vm, "EventIndustryOpen", res, NULL, DefSQDestructorCallback<ScriptEventIndustryOpen>, true); return 1; }
} // namespace SQConvert

namespace SQConvert {
	/* Allow ScriptEventIndustryClose to be used as Squirrel parameter */
	template <> inline Param<ScriptEventIndustryClose*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptEventIndustryClose> (vm, index)) { }
	template <> inline Param<ScriptEventIndustryClose&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptEventIndustryClose> (vm, index)) { }
	template <> inline Param<const ScriptEventIndustryClose*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptEventIndustryClose> (vm, index)) { }
	template <> inline Param<const ScriptEventIndustryClose&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptEventIndustryClose> (vm, index)) { }
	template <> inline int Return<ScriptEventIndustryClose *>(HSQUIRRELVM vm, ScriptEventIndustryClose *res) { if (res == NULL) { sq_pushnull(vm); return 1; } res->AddRef(); Squirrel::CreateClassInstanceVM(vm, "EventIndustryClose", res, NULL, DefSQDestructorCallback<ScriptEventIndustryClose>, true); return 1; }
} // namespace SQConvert

namespace SQConvert {
	/* Allow ScriptEventEngineAvailable to be used as Squirrel parameter */
	template <> inline Param<ScriptEventEngineAvailable*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptEventEngineAvailable> (vm, index)) { }
	template <> inline Param<ScriptEventEngineAvailable&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptEventEngineAvailable> (vm, index)) { }
	template <> inline Param<const ScriptEventEngineAvailable*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptEventEngineAvailable> (vm, index)) { }
	template <> inline Param<const ScriptEventEngineAvailable&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptEventEngineAvailable> (vm, index)) { }
	template <> inline int Return<ScriptEventEngineAvailable *>(HSQUIRRELVM vm, ScriptEventEngineAvailable *res) { if (res == NULL) { sq_pushnull(vm); return 1; } res->AddRef(); Squirrel::CreateClassInstanceVM(vm, "EventEngineAvailable", res, NULL, DefSQDestructorCallback<ScriptEventEngineAvailable>, true); return 1; }
} // namespace SQConvert

namespace SQConvert {
	/* Allow ScriptEventStationFirstVehicle to be used as Squirrel parameter */
	template <> inline Param<ScriptEventStationFirstVehicle*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptEventStationFirstVehicle> (vm, index)) { }
	template <> inline Param<ScriptEventStationFirstVehicle&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptEventStationFirstVehicle> (vm, index)) { }
	template <> inline Param<const ScriptEventStationFirstVehicle*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptEventStationFirstVehicle> (vm, index)) { }
	template <> inline Param<const ScriptEventStationFirstVehicle&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptEventStationFirstVehicle> (vm, index)) { }
	template <> inline int Return<ScriptEventStationFirstVehicle *>(HSQUIRRELVM vm, ScriptEventStationFirstVehicle *res) { if (res == NULL) { sq_pushnull(vm); return 1; } res->AddRef(); Squirrel::CreateClassInstanceVM(vm, "EventStationFirstVehicle", res, NULL, DefSQDestructorCallback<ScriptEventStationFirstVehicle>, true); return 1; }
} // namespace SQConvert

namespace SQConvert {
	/* Allow ScriptEventDisasterZeppelinerCrashed to be used as Squirrel parameter */
	template <> inline Param<ScriptEventDisasterZeppelinerCrashed*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptEventDisasterZeppelinerCrashed> (vm, index)) { }
	template <> inline Param<ScriptEventDisasterZeppelinerCrashed&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptEventDisasterZeppelinerCrashed> (vm, index)) { }
	template <> inline Param<const ScriptEventDisasterZeppelinerCrashed*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptEventDisasterZeppelinerCrashed> (vm, index)) { }
	template <> inline Param<const ScriptEventDisasterZeppelinerCrashed&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptEventDisasterZeppelinerCrashed> (vm, index)) { }
	template <> inline int Return<ScriptEventDisasterZeppelinerCrashed *>(HSQUIRRELVM vm, ScriptEventDisasterZeppelinerCrashed *res) { if (res == NULL) { sq_pushnull(vm); return 1; } res->AddRef(); Squirrel::CreateClassInstanceVM(vm, "EventDisasterZeppelinerCrashed", res, NULL, DefSQDestructorCallback<ScriptEventDisasterZeppelinerCrashed>, true); return 1; }
} // namespace SQConvert

namespace SQConvert {
	/* Allow ScriptEventDisasterZeppelinerCleared to be used as Squirrel parameter */
	template <> inline Param<ScriptEventDisasterZeppelinerCleared*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptEventDisasterZeppelinerCleared> (vm, index)) { }
	template <> inline Param<ScriptEventDisasterZeppelinerCleared&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptEventDisasterZeppelinerCleared> (vm, index)) { }
	template <> inline Param<const ScriptEventDisasterZeppelinerCleared*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptEventDisasterZeppelinerCleared> (vm, index)) { }
	template <> inline Param<const ScriptEventDisasterZeppelinerCleared&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptEventDisasterZeppelinerCleared> (vm, index)) { }
	template <> inline int Return<ScriptEventDisasterZeppelinerCleared *>(HSQUIRRELVM vm, ScriptEventDisasterZeppelinerCleared *res) { if (res == NULL) { sq_pushnull(vm); return 1; } res->AddRef(); Squirrel::CreateClassInstanceVM(vm, "EventDisasterZeppelinerCleared", res, NULL, DefSQDestructorCallback<ScriptEventDisasterZeppelinerCleared>, true); return 1; }
} // namespace SQConvert

namespace SQConvert {
	/* Allow ScriptEventTownFounded to be used as Squirrel parameter */
	template <> inline Param<ScriptEventTownFounded*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptEventTownFounded> (vm, index)) { }
	template <> inline Param<ScriptEventTownFounded&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptEventTownFounded> (vm, index)) { }
	template <> inline Param<const ScriptEventTownFounded*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptEventTownFounded> (vm, index)) { }
	template <> inline Param<const ScriptEventTownFounded&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptEventTownFounded> (vm, index)) { }
	template <> inline int Return<ScriptEventTownFounded *>(HSQUIRRELVM vm, ScriptEventTownFounded *res) { if (res == NULL) { sq_pushnull(vm); return 1; } res->AddRef(); Squirrel::CreateClassInstanceVM(vm, "EventTownFounded", res, NULL, DefSQDestructorCallback<ScriptEventTownFounded>, true); return 1; }
} // namespace SQConvert

namespace SQConvert {
	/* Allow ScriptEventAircraftDestTooFar to be used as Squirrel parameter */
	template <> inline Param<ScriptEventAircraftDestTooFar*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptEventAircraftDestTooFar> (vm, index)) { }
	template <> inline Param<ScriptEventAircraftDestTooFar&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptEventAircraftDestTooFar> (vm, index)) { }
	template <> inline Param<const ScriptEventAircraftDestTooFar*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptEventAircraftDestTooFar> (vm, index)) { }
	template <> inline Param<const ScriptEventAircraftDestTooFar&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptEventAircraftDestTooFar> (vm, index)) { }
	template <> inline int Return<ScriptEventAircraftDestTooFar *>(HSQUIRRELVM vm, ScriptEventAircraftDestTooFar *res) { if (res == NULL) { sq_pushnull(vm); return 1; } res->AddRef(); Squirrel::CreateClassInstanceVM(vm, "EventAircraftDestTooFar", res, NULL, DefSQDestructorCallback<ScriptEventAircraftDestTooFar>, true); return 1; }
} // namespace SQConvert

namespace SQConvert {
	/* Allow ScriptEventAdminPort to be used as Squirrel parameter */
	template <> inline Param<ScriptEventAdminPort*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptEventAdminPort> (vm, index)) { }
	template <> inline Param<ScriptEventAdminPort&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptEventAdminPort> (vm, index)) { }
	template <> inline Param<const ScriptEventAdminPort*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptEventAdminPort> (vm, index)) { }
	template <> inline Param<const ScriptEventAdminPort&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptEventAdminPort> (vm, index)) { }
	template <> inline int Return<ScriptEventAdminPort *>(HSQUIRRELVM vm, ScriptEventAdminPort *res) { if (res == NULL) { sq_pushnull(vm); return 1; } res->AddRef(); Squirrel::CreateClassInstanceVM(vm, "EventAdminPort", res, NULL, DefSQDestructorCallback<ScriptEventAdminPort>, true); return 1; }
} // namespace SQConvert

namespace SQConvert {
	/* Allow ScriptEventWindowWidgetClick to be used as Squirrel parameter */
	template <> inline Param<ScriptEventWindowWidgetClick*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptEventWindowWidgetClick> (vm, index)) { }
	template <> inline Param<ScriptEventWindowWidgetClick&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptEventWindowWidgetClick> (vm, index)) { }
	template <> inline Param<const ScriptEventWindowWidgetClick*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptEventWindowWidgetClick> (vm, index)) { }
	template <> inline Param<const ScriptEventWindowWidgetClick&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptEventWindowWidgetClick> (vm, index)) { }
	template <> inline int Return<ScriptEventWindowWidgetClick *>(HSQUIRRELVM vm, ScriptEventWindowWidgetClick *res) { if (res == NULL) { sq_pushnull(vm); return 1; } res->AddRef(); Squirrel::CreateClassInstanceVM(vm, "EventWindowWidgetClick", res, NULL, DefSQDestructorCallback<ScriptEventWindowWidgetClick>, true); return 1; }
} // namespace SQConvert

namespace SQConvert {
	/* Allow ScriptEventGoalQuestionAnswer to be used as Squirrel parameter */
	template <> inline Param<ScriptEventGoalQuestionAnswer*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptEventGoalQuestionAnswer> (vm, index)) { }
	template <> inline Param<ScriptEventGoalQuestionAnswer&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptEventGoalQuestionAnswer> (vm, index)) { }
	template <> inline Param<const ScriptEventGoalQuestionAnswer*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptEventGoalQuestionAnswer> (vm, index)) { }
	template <> inline Param<const ScriptEventGoalQuestionAnswer&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptEventGoalQuestionAnswer> (vm, index)) { }
	template <> inline int Return<ScriptEventGoalQuestionAnswer *>(HSQUIRRELVM vm, ScriptEventGoalQuestionAnswer *res) { if (res == NULL) { sq_pushnull(vm); return 1; } res->AddRef(); Squirrel::CreateClassInstanceVM(vm, "EventGoalQuestionAnswer", res, NULL, DefSQDestructorCallback<ScriptEventGoalQuestionAnswer>, true); return 1; }
} // namespace SQConvert

namespace SQConvert {
	/* Allow ScriptEventCompanyTown to be used as Squirrel parameter */
	template <> inline Param<ScriptEventCompanyTown*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptEventCompanyTown> (vm, index)) { }
	template <> inline Param<ScriptEventCompanyTown&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptEventCompanyTown> (vm, index)) { }
	template <> inline Param<const ScriptEventCompanyTown*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptEventCompanyTown> (vm, index)) { }
	template <> inline Param<const ScriptEventCompanyTown&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptEventCompanyTown> (vm, index)) { }
	template <> inline int Return<ScriptEventCompanyTown *>(HSQUIRRELVM vm, ScriptEventCompanyTown *res) { if (res == NULL) { sq_pushnull(vm); return 1; } res->AddRef(); Squirrel::CreateClassInstanceVM(vm, "EventCompanyTown", res, NULL, DefSQDestructorCallback<ScriptEventCompanyTown>, true); return 1; }
} // namespace SQConvert

namespace SQConvert {
	/* Allow ScriptEventExclusiveTransportRights to be used as Squirrel parameter */
	template <> inline Param<ScriptEventExclusiveTransportRights*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptEventExclusiveTransportRights> (vm, index)) { }
	template <> inline Param<ScriptEventExclusiveTransportRights&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptEventExclusiveTransportRights> (vm, index)) { }
	template <> inline Param<const ScriptEventExclusiveTransportRights*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptEventExclusiveTransportRights> (vm, index)) { }
	template <> inline Param<const ScriptEventExclusiveTransportRights&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptEventExclusiveTransportRights> (vm, index)) { }
	template <> inline int Return<ScriptEventExclusiveTransportRights *>(HSQUIRRELVM vm, ScriptEventExclusiveTransportRights *res) { if (res == NULL) { sq_pushnull(vm); return 1; } res->AddRef(); Squirrel::CreateClassInstanceVM(vm, "EventExclusiveTransportRights", res, NULL, DefSQDestructorCallback<ScriptEventExclusiveTransportRights>, true); return 1; }
} // namespace SQConvert

namespace SQConvert {
	/* Allow ScriptEventRoadReconstruction to be used as Squirrel parameter */
	template <> inline Param<ScriptEventRoadReconstruction*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptEventRoadReconstruction> (vm, index)) { }
	template <> inline Param<ScriptEventRoadReconstruction&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptEventRoadReconstruction> (vm, index)) { }
	template <> inline Param<const ScriptEventRoadReconstruction*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptEventRoadReconstruction> (vm, index)) { }
	template <> inline Param<const ScriptEventRoadReconstruction&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptEventRoadReconstruction> (vm, index)) { }
	template <> inline int Return<ScriptEventRoadReconstruction *>(HSQUIRRELVM vm, ScriptEventRoadReconstruction *res) { if (res == NULL) { sq_pushnull(vm); return 1; } res->AddRef(); Squirrel::CreateClassInstanceVM(vm, "EventRoadReconstruction", res, NULL, DefSQDestructorCallback<ScriptEventRoadReconstruction>, true); return 1; }
} // namespace SQConvert
