/* $Id$ */

/*
 * This file is part of OpenTTD.
 * OpenTTD is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * OpenTTD is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with OpenTTD. If not, see <http://www.gnu.org/licenses/>.
 */

/* THIS FILE IS AUTO-GENERATED; PLEASE DO NOT ALTER MANUALLY */

#include "../script_tile.hpp"

namespace SQConvert {
	/* Allow enums to be used as Squirrel parameters */
	template <> inline Param<ScriptTile::ErrorMessages>::Param (HSQUIRRELVM vm, int index) : data ((ScriptTile::ErrorMessages) GetInteger (vm, index)) { }
	template <> inline int Return<ScriptTile::ErrorMessages>(HSQUIRRELVM vm, ScriptTile::ErrorMessages res) { sq_pushinteger(vm, (int32)res); return 1; }
	template <> inline Param<ScriptTile::Corner>::Param (HSQUIRRELVM vm, int index) : data ((ScriptTile::Corner) GetInteger (vm, index)) { }
	template <> inline int Return<ScriptTile::Corner>(HSQUIRRELVM vm, ScriptTile::Corner res) { sq_pushinteger(vm, (int32)res); return 1; }
	template <> inline Param<ScriptTile::Slope>::Param (HSQUIRRELVM vm, int index) : data ((ScriptTile::Slope) GetInteger (vm, index)) { }
	template <> inline int Return<ScriptTile::Slope>(HSQUIRRELVM vm, ScriptTile::Slope res) { sq_pushinteger(vm, (int32)res); return 1; }
	template <> inline Param<ScriptTile::TransportType>::Param (HSQUIRRELVM vm, int index) : data ((ScriptTile::TransportType) GetInteger (vm, index)) { }
	template <> inline int Return<ScriptTile::TransportType>(HSQUIRRELVM vm, ScriptTile::TransportType res) { sq_pushinteger(vm, (int32)res); return 1; }
	template <> inline Param<ScriptTile::BuildType>::Param (HSQUIRRELVM vm, int index) : data ((ScriptTile::BuildType) GetInteger (vm, index)) { }
	template <> inline int Return<ScriptTile::BuildType>(HSQUIRRELVM vm, ScriptTile::BuildType res) { sq_pushinteger(vm, (int32)res); return 1; }
	template <> inline Param<ScriptTile::TerrainType>::Param (HSQUIRRELVM vm, int index) : data ((ScriptTile::TerrainType) GetInteger (vm, index)) { }
	template <> inline int Return<ScriptTile::TerrainType>(HSQUIRRELVM vm, ScriptTile::TerrainType res) { sq_pushinteger(vm, (int32)res); return 1; }

	/* Allow ScriptTile to be used as Squirrel parameter */
	template <> inline Param<ScriptTile*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptTile> (vm, index)) { }
	template <> inline Param<ScriptTile&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptTile> (vm, index)) { }
	template <> inline Param<const ScriptTile*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptTile> (vm, index)) { }
	template <> inline Param<const ScriptTile&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptTile> (vm, index)) { }
	template <> inline int Return<ScriptTile *>(HSQUIRRELVM vm, ScriptTile *res) { if (res == NULL) { sq_pushnull(vm); return 1; } res->AddRef(); Squirrel::CreateClassInstanceVM(vm, "Tile", res, NULL, DefSQDestructorCallback<ScriptTile>, true); return 1; }
} // namespace SQConvert
