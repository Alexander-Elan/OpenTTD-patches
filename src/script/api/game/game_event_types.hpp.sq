/* $Id$ */

/*
 * This file is part of OpenTTD.
 * OpenTTD is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * OpenTTD is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with OpenTTD. If not, see <http://www.gnu.org/licenses/>.
 */

/* THIS FILE IS AUTO-GENERATED; PLEASE DO NOT ALTER MANUALLY */

#include "../script_event_types.hpp"


template <> const char *GetClassName<ScriptEventVehicleCrashed, ST_GS>() { return "GSEventVehicleCrashed"; }

static void SQGSEventVehicleCrashed_Register (Squirrel *engine)
{
	DefSQClass<ScriptEventVehicleCrashed, ST_GS> SQGSEventVehicleCrashed;
	SQGSEventVehicleCrashed.PreRegister(engine, "GSEvent");

	SQGSEventVehicleCrashed.DefSQConst(engine, ScriptEventVehicleCrashed::CRASH_TRAIN,               "CRASH_TRAIN");
	SQGSEventVehicleCrashed.DefSQConst(engine, ScriptEventVehicleCrashed::CRASH_RV_LEVEL_CROSSING,   "CRASH_RV_LEVEL_CROSSING");
	SQGSEventVehicleCrashed.DefSQConst(engine, ScriptEventVehicleCrashed::CRASH_RV_UFO,              "CRASH_RV_UFO");
	SQGSEventVehicleCrashed.DefSQConst(engine, ScriptEventVehicleCrashed::CRASH_PLANE_LANDING,       "CRASH_PLANE_LANDING");
	SQGSEventVehicleCrashed.DefSQConst(engine, ScriptEventVehicleCrashed::CRASH_AIRCRAFT_NO_AIRPORT, "CRASH_AIRCRAFT_NO_AIRPORT");
	SQGSEventVehicleCrashed.DefSQConst(engine, ScriptEventVehicleCrashed::CRASH_FLOODED,             "CRASH_FLOODED");

	SQGSEventVehicleCrashed.DefSQStaticMethod(engine, &ScriptEventVehicleCrashed::Convert, "Convert", 2, ".x");

	SQGSEventVehicleCrashed.DefSQMethod(engine, &ScriptEventVehicleCrashed::GetVehicleID,   "GetVehicleID",   1, "x");
	SQGSEventVehicleCrashed.DefSQMethod(engine, &ScriptEventVehicleCrashed::GetCrashSite,   "GetCrashSite",   1, "x");
	SQGSEventVehicleCrashed.DefSQMethod(engine, &ScriptEventVehicleCrashed::GetCrashReason, "GetCrashReason", 1, "x");

	SQGSEventVehicleCrashed.PostRegister(engine);
}


template <> const char *GetClassName<ScriptEventSubsidyOffer, ST_GS>() { return "GSEventSubsidyOffer"; }

static void SQGSEventSubsidyOffer_Register (Squirrel *engine)
{
	DefSQClass<ScriptEventSubsidyOffer, ST_GS> SQGSEventSubsidyOffer;
	SQGSEventSubsidyOffer.PreRegister(engine, "GSEvent");

	SQGSEventSubsidyOffer.DefSQStaticMethod(engine, &ScriptEventSubsidyOffer::Convert, "Convert", 2, ".x");

	SQGSEventSubsidyOffer.DefSQMethod(engine, &ScriptEventSubsidyOffer::GetSubsidyID, "GetSubsidyID", 1, "x");

	SQGSEventSubsidyOffer.PostRegister(engine);
}


template <> const char *GetClassName<ScriptEventSubsidyOfferExpired, ST_GS>() { return "GSEventSubsidyOfferExpired"; }

static void SQGSEventSubsidyOfferExpired_Register (Squirrel *engine)
{
	DefSQClass<ScriptEventSubsidyOfferExpired, ST_GS> SQGSEventSubsidyOfferExpired;
	SQGSEventSubsidyOfferExpired.PreRegister(engine, "GSEvent");

	SQGSEventSubsidyOfferExpired.DefSQStaticMethod(engine, &ScriptEventSubsidyOfferExpired::Convert, "Convert", 2, ".x");

	SQGSEventSubsidyOfferExpired.DefSQMethod(engine, &ScriptEventSubsidyOfferExpired::GetSubsidyID, "GetSubsidyID", 1, "x");

	SQGSEventSubsidyOfferExpired.PostRegister(engine);
}


template <> const char *GetClassName<ScriptEventSubsidyAwarded, ST_GS>() { return "GSEventSubsidyAwarded"; }

static void SQGSEventSubsidyAwarded_Register (Squirrel *engine)
{
	DefSQClass<ScriptEventSubsidyAwarded, ST_GS> SQGSEventSubsidyAwarded;
	SQGSEventSubsidyAwarded.PreRegister(engine, "GSEvent");

	SQGSEventSubsidyAwarded.DefSQStaticMethod(engine, &ScriptEventSubsidyAwarded::Convert, "Convert", 2, ".x");

	SQGSEventSubsidyAwarded.DefSQMethod(engine, &ScriptEventSubsidyAwarded::GetSubsidyID, "GetSubsidyID", 1, "x");

	SQGSEventSubsidyAwarded.PostRegister(engine);
}


template <> const char *GetClassName<ScriptEventSubsidyExpired, ST_GS>() { return "GSEventSubsidyExpired"; }

static void SQGSEventSubsidyExpired_Register (Squirrel *engine)
{
	DefSQClass<ScriptEventSubsidyExpired, ST_GS> SQGSEventSubsidyExpired;
	SQGSEventSubsidyExpired.PreRegister(engine, "GSEvent");

	SQGSEventSubsidyExpired.DefSQStaticMethod(engine, &ScriptEventSubsidyExpired::Convert, "Convert", 2, ".x");

	SQGSEventSubsidyExpired.DefSQMethod(engine, &ScriptEventSubsidyExpired::GetSubsidyID, "GetSubsidyID", 1, "x");

	SQGSEventSubsidyExpired.PostRegister(engine);
}


template <> const char *GetClassName<ScriptEventCompanyNew, ST_GS>() { return "GSEventCompanyNew"; }

static void SQGSEventCompanyNew_Register (Squirrel *engine)
{
	DefSQClass<ScriptEventCompanyNew, ST_GS> SQGSEventCompanyNew;
	SQGSEventCompanyNew.PreRegister(engine, "GSEvent");

	SQGSEventCompanyNew.DefSQStaticMethod(engine, &ScriptEventCompanyNew::Convert, "Convert", 2, ".x");

	SQGSEventCompanyNew.DefSQMethod(engine, &ScriptEventCompanyNew::GetCompanyID, "GetCompanyID", 1, "x");

	SQGSEventCompanyNew.PostRegister(engine);
}


template <> const char *GetClassName<ScriptEventCompanyInTrouble, ST_GS>() { return "GSEventCompanyInTrouble"; }

static void SQGSEventCompanyInTrouble_Register (Squirrel *engine)
{
	DefSQClass<ScriptEventCompanyInTrouble, ST_GS> SQGSEventCompanyInTrouble;
	SQGSEventCompanyInTrouble.PreRegister(engine, "GSEvent");

	SQGSEventCompanyInTrouble.DefSQStaticMethod(engine, &ScriptEventCompanyInTrouble::Convert, "Convert", 2, ".x");

	SQGSEventCompanyInTrouble.DefSQMethod(engine, &ScriptEventCompanyInTrouble::GetCompanyID, "GetCompanyID", 1, "x");

	SQGSEventCompanyInTrouble.PostRegister(engine);
}


template <> const char *GetClassName<ScriptEventCompanyMerger, ST_GS>() { return "GSEventCompanyMerger"; }

static void SQGSEventCompanyMerger_Register (Squirrel *engine)
{
	DefSQClass<ScriptEventCompanyMerger, ST_GS> SQGSEventCompanyMerger;
	SQGSEventCompanyMerger.PreRegister(engine, "GSEvent");

	SQGSEventCompanyMerger.DefSQStaticMethod(engine, &ScriptEventCompanyMerger::Convert, "Convert", 2, ".x");

	SQGSEventCompanyMerger.DefSQMethod(engine, &ScriptEventCompanyMerger::GetOldCompanyID, "GetOldCompanyID", 1, "x");
	SQGSEventCompanyMerger.DefSQMethod(engine, &ScriptEventCompanyMerger::GetNewCompanyID, "GetNewCompanyID", 1, "x");

	SQGSEventCompanyMerger.PostRegister(engine);
}


template <> const char *GetClassName<ScriptEventCompanyBankrupt, ST_GS>() { return "GSEventCompanyBankrupt"; }

static void SQGSEventCompanyBankrupt_Register (Squirrel *engine)
{
	DefSQClass<ScriptEventCompanyBankrupt, ST_GS> SQGSEventCompanyBankrupt;
	SQGSEventCompanyBankrupt.PreRegister(engine, "GSEvent");

	SQGSEventCompanyBankrupt.DefSQStaticMethod(engine, &ScriptEventCompanyBankrupt::Convert, "Convert", 2, ".x");

	SQGSEventCompanyBankrupt.DefSQMethod(engine, &ScriptEventCompanyBankrupt::GetCompanyID, "GetCompanyID", 1, "x");

	SQGSEventCompanyBankrupt.PostRegister(engine);
}


template <> const char *GetClassName<ScriptEventIndustryOpen, ST_GS>() { return "GSEventIndustryOpen"; }

static void SQGSEventIndustryOpen_Register (Squirrel *engine)
{
	DefSQClass<ScriptEventIndustryOpen, ST_GS> SQGSEventIndustryOpen;
	SQGSEventIndustryOpen.PreRegister(engine, "GSEvent");

	SQGSEventIndustryOpen.DefSQStaticMethod(engine, &ScriptEventIndustryOpen::Convert, "Convert", 2, ".x");

	SQGSEventIndustryOpen.DefSQMethod(engine, &ScriptEventIndustryOpen::GetIndustryID, "GetIndustryID", 1, "x");

	SQGSEventIndustryOpen.PostRegister(engine);
}


template <> const char *GetClassName<ScriptEventIndustryClose, ST_GS>() { return "GSEventIndustryClose"; }

static void SQGSEventIndustryClose_Register (Squirrel *engine)
{
	DefSQClass<ScriptEventIndustryClose, ST_GS> SQGSEventIndustryClose;
	SQGSEventIndustryClose.PreRegister(engine, "GSEvent");

	SQGSEventIndustryClose.DefSQStaticMethod(engine, &ScriptEventIndustryClose::Convert, "Convert", 2, ".x");

	SQGSEventIndustryClose.DefSQMethod(engine, &ScriptEventIndustryClose::GetIndustryID, "GetIndustryID", 1, "x");

	SQGSEventIndustryClose.PostRegister(engine);
}


template <> const char *GetClassName<ScriptEventStationFirstVehicle, ST_GS>() { return "GSEventStationFirstVehicle"; }

static void SQGSEventStationFirstVehicle_Register (Squirrel *engine)
{
	DefSQClass<ScriptEventStationFirstVehicle, ST_GS> SQGSEventStationFirstVehicle;
	SQGSEventStationFirstVehicle.PreRegister(engine, "GSEvent");

	SQGSEventStationFirstVehicle.DefSQStaticMethod(engine, &ScriptEventStationFirstVehicle::Convert, "Convert", 2, ".x");

	SQGSEventStationFirstVehicle.DefSQMethod(engine, &ScriptEventStationFirstVehicle::GetStationID, "GetStationID", 1, "x");
	SQGSEventStationFirstVehicle.DefSQMethod(engine, &ScriptEventStationFirstVehicle::GetVehicleID, "GetVehicleID", 1, "x");

	SQGSEventStationFirstVehicle.PostRegister(engine);
}


template <> const char *GetClassName<ScriptEventTownFounded, ST_GS>() { return "GSEventTownFounded"; }

static void SQGSEventTownFounded_Register (Squirrel *engine)
{
	DefSQClass<ScriptEventTownFounded, ST_GS> SQGSEventTownFounded;
	SQGSEventTownFounded.PreRegister(engine, "GSEvent");

	SQGSEventTownFounded.DefSQStaticMethod(engine, &ScriptEventTownFounded::Convert, "Convert", 2, ".x");

	SQGSEventTownFounded.DefSQMethod(engine, &ScriptEventTownFounded::GetTownID, "GetTownID", 1, "x");

	SQGSEventTownFounded.PostRegister(engine);
}


template <> const char *GetClassName<ScriptEventAdminPort, ST_GS>() { return "GSEventAdminPort"; }

static void SQGSEventAdminPort_Register (Squirrel *engine)
{
	DefSQClass<ScriptEventAdminPort, ST_GS> SQGSEventAdminPort;
	SQGSEventAdminPort.PreRegister(engine, "GSEvent");

	SQGSEventAdminPort.DefSQStaticMethod(engine, &ScriptEventAdminPort::Convert, "Convert", 2, ".x");

	SQGSEventAdminPort.DefSQAdvancedMethod(engine, &ScriptEventAdminPort::GetObject, "GetObject");

	SQGSEventAdminPort.PostRegister(engine);
}


template <> const char *GetClassName<ScriptEventWindowWidgetClick, ST_GS>() { return "GSEventWindowWidgetClick"; }

static void SQGSEventWindowWidgetClick_Register (Squirrel *engine)
{
	DefSQClass<ScriptEventWindowWidgetClick, ST_GS> SQGSEventWindowWidgetClick;
	SQGSEventWindowWidgetClick.PreRegister(engine, "GSEvent");

	SQGSEventWindowWidgetClick.DefSQStaticMethod(engine, &ScriptEventWindowWidgetClick::Convert, "Convert", 2, ".x");

	SQGSEventWindowWidgetClick.DefSQMethod(engine, &ScriptEventWindowWidgetClick::GetWindowClass,  "GetWindowClass",  1, "x");
	SQGSEventWindowWidgetClick.DefSQMethod(engine, &ScriptEventWindowWidgetClick::GetWindowNumber, "GetWindowNumber", 1, "x");
	SQGSEventWindowWidgetClick.DefSQMethod(engine, &ScriptEventWindowWidgetClick::GetWidgetNumber, "GetWidgetNumber", 1, "x");

	SQGSEventWindowWidgetClick.PostRegister(engine);
}


template <> const char *GetClassName<ScriptEventGoalQuestionAnswer, ST_GS>() { return "GSEventGoalQuestionAnswer"; }

static void SQGSEventGoalQuestionAnswer_Register (Squirrel *engine)
{
	DefSQClass<ScriptEventGoalQuestionAnswer, ST_GS> SQGSEventGoalQuestionAnswer;
	SQGSEventGoalQuestionAnswer.PreRegister(engine, "GSEvent");

	SQGSEventGoalQuestionAnswer.DefSQStaticMethod(engine, &ScriptEventGoalQuestionAnswer::Convert, "Convert", 2, ".x");

	SQGSEventGoalQuestionAnswer.DefSQMethod(engine, &ScriptEventGoalQuestionAnswer::GetUniqueID, "GetUniqueID", 1, "x");
	SQGSEventGoalQuestionAnswer.DefSQMethod(engine, &ScriptEventGoalQuestionAnswer::GetCompany,  "GetCompany",  1, "x");
	SQGSEventGoalQuestionAnswer.DefSQMethod(engine, &ScriptEventGoalQuestionAnswer::GetButton,   "GetButton",   1, "x");

	SQGSEventGoalQuestionAnswer.PostRegister(engine);
}


template <> const char *GetClassName<ScriptEventCompanyTown, ST_GS>() { return "GSEventCompanyTown"; }

static void SQGSEventCompanyTown_Register (Squirrel *engine)
{
	DefSQClass<ScriptEventCompanyTown, ST_GS> SQGSEventCompanyTown;
	SQGSEventCompanyTown.PreRegister(engine, "GSEvent");

	SQGSEventCompanyTown.DefSQStaticMethod(engine, &ScriptEventCompanyTown::Convert, "Convert", 2, ".x");

	SQGSEventCompanyTown.DefSQMethod(engine, &ScriptEventCompanyTown::GetCompanyID, "GetCompanyID", 1, "x");
	SQGSEventCompanyTown.DefSQMethod(engine, &ScriptEventCompanyTown::GetTownID,    "GetTownID",    1, "x");

	SQGSEventCompanyTown.PostRegister(engine);
}


template <> const char *GetClassName<ScriptEventExclusiveTransportRights, ST_GS>() { return "GSEventExclusiveTransportRights"; }

static void SQGSEventExclusiveTransportRights_Register (Squirrel *engine)
{
	DefSQClass<ScriptEventExclusiveTransportRights, ST_GS> SQGSEventExclusiveTransportRights;
	SQGSEventExclusiveTransportRights.PreRegister(engine, "GSEventCompanyTown");
	SQGSEventExclusiveTransportRights.AddConstructor<void (ScriptEventExclusiveTransportRights::*)(ScriptCompany::CompanyID company, TownID town), 3>(engine, "xii");

	SQGSEventExclusiveTransportRights.DefSQStaticMethod(engine, &ScriptEventExclusiveTransportRights::Convert, "Convert", 2, ".x");

	SQGSEventExclusiveTransportRights.PostRegister(engine);
}


template <> const char *GetClassName<ScriptEventRoadReconstruction, ST_GS>() { return "GSEventRoadReconstruction"; }

static void SQGSEventRoadReconstruction_Register (Squirrel *engine)
{
	DefSQClass<ScriptEventRoadReconstruction, ST_GS> SQGSEventRoadReconstruction;
	SQGSEventRoadReconstruction.PreRegister(engine, "GSEventCompanyTown");
	SQGSEventRoadReconstruction.AddConstructor<void (ScriptEventRoadReconstruction::*)(ScriptCompany::CompanyID company, TownID town), 3>(engine, "xii");

	SQGSEventRoadReconstruction.DefSQStaticMethod(engine, &ScriptEventRoadReconstruction::Convert, "Convert", 2, ".x");

	SQGSEventRoadReconstruction.PostRegister(engine);
}
