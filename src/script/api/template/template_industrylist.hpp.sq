/* $Id$ */

/*
 * This file is part of OpenTTD.
 * OpenTTD is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * OpenTTD is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with OpenTTD. If not, see <http://www.gnu.org/licenses/>.
 */

/* THIS FILE IS AUTO-GENERATED; PLEASE DO NOT ALTER MANUALLY */

#include "../script_industrylist.hpp"

namespace SQConvert {
	/* Allow ScriptIndustryList to be used as Squirrel parameter */
	template <> inline Param<ScriptIndustryList*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptIndustryList> (vm, index)) { }
	template <> inline Param<ScriptIndustryList&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptIndustryList> (vm, index)) { }
	template <> inline Param<const ScriptIndustryList*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptIndustryList> (vm, index)) { }
	template <> inline Param<const ScriptIndustryList&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptIndustryList> (vm, index)) { }
	template <> inline int Return<ScriptIndustryList *>(HSQUIRRELVM vm, ScriptIndustryList *res) { if (res == NULL) { sq_pushnull(vm); return 1; } res->AddRef(); Squirrel::CreateClassInstanceVM(vm, "IndustryList", res, NULL, DefSQDestructorCallback<ScriptIndustryList>, true); return 1; }
} // namespace SQConvert

namespace SQConvert {
	/* Allow ScriptIndustryList_CargoAccepting to be used as Squirrel parameter */
	template <> inline Param<ScriptIndustryList_CargoAccepting*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptIndustryList_CargoAccepting> (vm, index)) { }
	template <> inline Param<ScriptIndustryList_CargoAccepting&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptIndustryList_CargoAccepting> (vm, index)) { }
	template <> inline Param<const ScriptIndustryList_CargoAccepting*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptIndustryList_CargoAccepting> (vm, index)) { }
	template <> inline Param<const ScriptIndustryList_CargoAccepting&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptIndustryList_CargoAccepting> (vm, index)) { }
	template <> inline int Return<ScriptIndustryList_CargoAccepting *>(HSQUIRRELVM vm, ScriptIndustryList_CargoAccepting *res) { if (res == NULL) { sq_pushnull(vm); return 1; } res->AddRef(); Squirrel::CreateClassInstanceVM(vm, "IndustryList_CargoAccepting", res, NULL, DefSQDestructorCallback<ScriptIndustryList_CargoAccepting>, true); return 1; }
} // namespace SQConvert

namespace SQConvert {
	/* Allow ScriptIndustryList_CargoProducing to be used as Squirrel parameter */
	template <> inline Param<ScriptIndustryList_CargoProducing*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptIndustryList_CargoProducing> (vm, index)) { }
	template <> inline Param<ScriptIndustryList_CargoProducing&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptIndustryList_CargoProducing> (vm, index)) { }
	template <> inline Param<const ScriptIndustryList_CargoProducing*>::Param (HSQUIRRELVM vm, int index) : data ( GetUserPointer<ScriptIndustryList_CargoProducing> (vm, index)) { }
	template <> inline Param<const ScriptIndustryList_CargoProducing&>::Param (HSQUIRRELVM vm, int index) : data (*GetUserPointer<ScriptIndustryList_CargoProducing> (vm, index)) { }
	template <> inline int Return<ScriptIndustryList_CargoProducing *>(HSQUIRRELVM vm, ScriptIndustryList_CargoProducing *res) { if (res == NULL) { sq_pushnull(vm); return 1; } res->AddRef(); Squirrel::CreateClassInstanceVM(vm, "IndustryList_CargoProducing", res, NULL, DefSQDestructorCallback<ScriptIndustryList_CargoProducing>, true); return 1; }
} // namespace SQConvert
