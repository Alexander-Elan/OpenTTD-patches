/* $Id$ */

/*
 * This file is part of OpenTTD.
 * OpenTTD is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * OpenTTD is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with OpenTTD. If not, see <http://www.gnu.org/licenses/>.
 */

/** @file table/settings.h Settings to save in the savegame and config file. */

/* Callback function used in _settings[] as well as _company_settings[] */
static size_t ConvertLandscape(const char *value);


/****************************
 * OTTD specific INI stuff
 ****************************/

/**
 * Settings-macro usage:
 * The list might look daunting at first, but is in general easy to understand.
 * The macros can be grouped depending on where the config variable is
 * stored:
 * 1. SDTG_something
 *    These are for global variables, so this is the one you will use
 *    for a #SettingDescGlobVarList section. Here 'var' refers to a
 *    global variable.
 * 2. SDTC_something
 *    These are for client-only variables. Here the 'var' refers to an
 *    entry inside _settings_client.
 * 3. SDT_something
 *    Thse are for members in the struct described by the current
 *    #SettingDesc list / .ini file.  Here, 'base' specifies type of the
 *    struct while 'var' points out the member of the struct (the actual
 *    struct to store it in is implicitely defined by the #SettingDesc
 *    list / .ini file preamble the entry is in).
 *
 * The something part defines the type of variable to store. There are a
 * lot of types. Easy ones are:
 * - VAR:  any number type, 'type' field specifies what number. eg int8 or uint32
 * - BOOL: a boolean number type
 * - STR:  a string or character. 'type' field specifies what string. Normal, string, or quoted
 * A bit more difficult to use are MMANY (meaning ManyOfMany) and OMANY (OneOfMany)
 * These are actually normal numbers, only bitmasked. In MMANY several bits can
 * be set, in the other only one.
 * There are _NULL() macros as well, these fill up space so you can add more
 * settings there (in place) and you DON'T have to increase the savegame version.
 *
 * While reading values from openttd.cfg, some values may not be converted
 * properly, for any kind of reasons.  In order to allow a process of self-cleaning
 * mechanism, a callback procedure is made available.  You will have to supply the function, which
 * will work on a string, one function per setting. And of course, enable the callback param
 * on the appropriate macro.
 */

#define NSD_GENERAL(name, def, cmd, guiflags, min, max, interval, many, str, strhelp, strval, proc, load, cat)\
	{name, (const void*)(size_t)(def), {(byte)cmd}, {(uint16)guiflags}, min, max, interval, many, str, strhelp, strval, proc, load, cat}

#define SDT_NULL(length, vfrom, vto, lfrom, lto)\
	{{"", NULL, {0}, {0}, 0, 0, 0, NULL, STR_NULL, STR_NULL, STR_NULL, NULL, NULL, SC_NONE}, SLE_NULL(length, vfrom, vto, lfrom, lto)}

#define SDT_END() {{NULL, NULL, {0}, {0}, 0, 0, 0, NULL, STR_NULL, STR_NULL, STR_NULL, NULL, NULL, SC_NONE}, SLE_END()}

/* Macros for various objects to go in the configuration file.
 * This section is for global variables */
#define SDTG_VAR(name, conv, flags, guiflags, var, def, min, max, interval, str, strhelp, strval, proc, vfrom, vto, lfrom, lto, cat)\
	{NSD_GENERAL(name, def, SDT_NUMX, guiflags, min, max, interval, NULL, str, strhelp, strval, proc, NULL, cat), SLEGF_VAR(var, flags, (VarTypes)(conv), vfrom, vto, lfrom, lto)}

#define SDTG_BOOL(name, flags, guiflags, var, def, str, strhelp, strval, proc, vfrom, vto, lfrom, lto, cat)\
	{NSD_GENERAL(name, def, SDT_BOOLX, guiflags, 0, 1, 0, NULL, str, strhelp, strval, proc, NULL, cat), SLEGF_VAR(var, flags, SLE_BOOL, vfrom, vto, lfrom, lto)}

#define SDTG_LIST(name, conv, length, flags, guiflags, var, def, str, strhelp, strval, proc, vfrom, vto, lfrom, lto, cat)\
	{NSD_GENERAL(name, def, SDT_INTLIST, guiflags, 0, 0, 0, NULL, str, strhelp, strval, proc, NULL, cat), SLEGF_ARR(var, flags, (VarTypes)(conv), length, vfrom, vto, lfrom, lto)}

#define SDTG_STR(name, conv, flags, guiflags, var, def, str, strhelp, strval, proc, vfrom, vto, lfrom, lto, cat)\
	{NSD_GENERAL(name, def, SDT_STRING, guiflags, 0, 0, 0, NULL, str, strhelp, strval, proc, NULL, cat), SLEGF_STR(var, flags, (StrTypes)(conv), (conv & SLS_POINTER) ? 0 : lengthof(var), vfrom, vto, lfrom, lto)}

#define SDTG_OMANY(name, conv, flags, guiflags, var, def, max, full, str, strhelp, strval, proc, vfrom, vto, lfrom, lto, cat)\
	{NSD_GENERAL(name, def, SDT_ONEOFMANY, guiflags, 0, max, 0, full, str, strhelp, strval, proc, NULL, cat), SLEGF_VAR(var, flags, (VarTypes)(conv), vfrom, vto, lfrom, lto)}

#define SDTG_MMANY(name, conv, flags, guiflags, var, def, full, str, strhelp, strval, proc, vfrom, vto, lfrom, lto, cat)\
	{NSD_GENERAL(name, def, SDT_MANYOFMANY, guiflags, 0, 0, 0, full, str, strhelp, strval, proc, NULL, cat), SLEGF_VAR(var, flags, (VarTypes)(conv), vfrom, vto, lfrom, lto)}

/* Macros for various objects to go in the configuration file.
 * This section is for structures where their various members are saved */
#define SDT_VAR(base, var, conv, flags, guiflags, def, min, max, interval, str, strhelp, strval, proc, vfrom, vto, lfrom, lto, cat)\
	{NSD_GENERAL(#var, def, SDT_NUMX, guiflags, min, max, interval, NULL, str, strhelp, strval, proc, NULL, cat), SLEF_VAR(base, var, flags, (VarTypes)(conv), vfrom, vto, lfrom, lto)}

#define SDT_BOOL(base, var, flags, guiflags, def, str, strhelp, strval, proc, vfrom, vto, lfrom, lto, cat)\
	{NSD_GENERAL(#var, def, SDT_BOOLX, guiflags, 0, 1, 0, NULL, str, strhelp, strval, proc, NULL, cat), SLEF_VAR(base, var, flags, SLE_BOOL, vfrom, vto, lfrom, lto)}

#define SDT_STR(base, var, conv, flags, guiflags, def, str, strhelp, strval, proc, vfrom, vto, lfrom, lto, cat)\
	{NSD_GENERAL(#var, def, SDT_STRING, guiflags, 0, 0, 0, NULL, str, strhelp, strval, proc, NULL, cat), SLEF_STR(base, var, flags, (StrTypes)(conv), (conv & SLS_POINTER) ? 0 : cpp_lengthof(base, var), vfrom, vto, lfrom, lto)}

#define SDT_OMANY(base, var, conv, flags, guiflags, def, max, full, str, strhelp, strval, proc, vfrom, vto, lfrom, lto, load, cat)\
	{NSD_GENERAL(#var, def, SDT_ONEOFMANY, guiflags, 0, max, 0, full, str, strhelp, strval, proc, load, cat), SLEF_VAR(base, var, flags, (VarTypes)(conv), vfrom, vto, lfrom, lto)}


#define SDTC_VAR(var, conv, flags, guiflags, def, min, max, interval, str, strhelp, strval, proc, vfrom, vto, lfrom, lto, cat)\
	{NSD_GENERAL(#var, def, SDT_NUMX, guiflags, min, max, interval, NULL, str, strhelp, strval, proc, NULL, cat), SLEGF_VAR(_settings_client.var, flags, (VarTypes)(conv), vfrom, vto, lfrom, lto)}

#define SDTC_BOOL(var, flags, guiflags, def, str, strhelp, strval, proc, vfrom, vto, lfrom, lto, cat)\
	{NSD_GENERAL(#var, def, SDT_BOOLX, guiflags, 0, 1, 0, NULL, str, strhelp, strval, proc, NULL, cat), SLEGF_VAR(_settings_client.var, flags, SLE_BOOL, vfrom, vto, lfrom, lto)}

#define SDTC_LIST(var, conv, flags, guiflags, def, str, strhelp, strval, proc, vfrom, vto, lfrom, lto, cat)\
	{NSD_GENERAL(#var, def, SDT_INTLIST, guiflags, 0, 0, 0, NULL, str, strhelp, strval, proc, NULL, cat), SLEGF_ARR(_settings_client.var, flags, (VarTypes)(conv), lengthof(_settings_client.var), vfrom, vto, lfrom, lto)}

#define SDTC_STR(var, conv, flags, guiflags, def, str, strhelp, strval, proc, vfrom, vto, lfrom, lto, cat)\
	{NSD_GENERAL(#var, def, SDT_STRING, guiflags, 0, 0, 0, NULL, str, strhelp, strval, proc, NULL, cat), SLEGF_STR(_settings_client.var, flags, (StrTypes)(conv), (conv & SLS_POINTER) ? 0 : lengthof(_settings_client.var), vfrom, vto, lfrom, lto)}

#define SDTC_OMANY(var, conv, flags, guiflags, def, max, full, str, strhelp, strval, proc, vfrom, vto, lfrom, lto, cat)\
	{NSD_GENERAL(#var, def, SDT_ONEOFMANY, guiflags, 0, max, 0, full, str, strhelp, strval, proc, NULL, cat), SLEGF_VAR(_settings_client.var, flags, (VarTypes)(conv), vfrom, vto, lfrom, lto)}

