/* $Id$ */

/*
 * This file is part of OpenTTD.
 * OpenTTD is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * OpenTTD is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with OpenTTD. If not, see <http://www.gnu.org/licenses/>.
 */

/* THIS FILE IS AUTO-GENERATED; PLEASE DO NOT ALTER MANUALLY */

#include "../script_event_types.hpp"


static void SQGSEventVehicleCrashed_Register (Squirrel *engine)
{
	engine->AddClassBegin ("GSEventVehicleCrashed", "GSEvent");

	engine->AddConst ("CRASH_TRAIN",               ScriptEventVehicleCrashed::CRASH_TRAIN);
	engine->AddConst ("CRASH_RV_LEVEL_CROSSING",   ScriptEventVehicleCrashed::CRASH_RV_LEVEL_CROSSING);
	engine->AddConst ("CRASH_RV_UFO",              ScriptEventVehicleCrashed::CRASH_RV_UFO);
	engine->AddConst ("CRASH_PLANE_LANDING",       ScriptEventVehicleCrashed::CRASH_PLANE_LANDING);
	engine->AddConst ("CRASH_AIRCRAFT_NO_AIRPORT", ScriptEventVehicleCrashed::CRASH_AIRCRAFT_NO_AIRPORT);
	engine->AddConst ("CRASH_FLOODED",             ScriptEventVehicleCrashed::CRASH_FLOODED);

	SQConvert::DefSQStaticMethod (engine, &ScriptEventVehicleCrashed::Convert, "Convert", 2, ".x");

	SQConvert::DefSQMethod (engine, "GSEventVehicleCrashed", &ScriptEventVehicleCrashed::GetVehicleID,   "GetVehicleID",   1, "x");
	SQConvert::DefSQMethod (engine, "GSEventVehicleCrashed", &ScriptEventVehicleCrashed::GetCrashSite,   "GetCrashSite",   1, "x");
	SQConvert::DefSQMethod (engine, "GSEventVehicleCrashed", &ScriptEventVehicleCrashed::GetCrashReason, "GetCrashReason", 1, "x");

	engine->AddClassEnd();
}


static void SQGSEventSubsidyOffer_Register (Squirrel *engine)
{
	engine->AddClassBegin ("GSEventSubsidyOffer", "GSEvent");

	SQConvert::DefSQStaticMethod (engine, &ScriptEventSubsidyOffer::Convert, "Convert", 2, ".x");

	SQConvert::DefSQMethod (engine, "GSEventSubsidyOffer", &ScriptEventSubsidyOffer::GetSubsidyID, "GetSubsidyID", 1, "x");

	engine->AddClassEnd();
}


static void SQGSEventSubsidyOfferExpired_Register (Squirrel *engine)
{
	engine->AddClassBegin ("GSEventSubsidyOfferExpired", "GSEvent");

	SQConvert::DefSQStaticMethod (engine, &ScriptEventSubsidyOfferExpired::Convert, "Convert", 2, ".x");

	SQConvert::DefSQMethod (engine, "GSEventSubsidyOfferExpired", &ScriptEventSubsidyOfferExpired::GetSubsidyID, "GetSubsidyID", 1, "x");

	engine->AddClassEnd();
}


static void SQGSEventSubsidyAwarded_Register (Squirrel *engine)
{
	engine->AddClassBegin ("GSEventSubsidyAwarded", "GSEvent");

	SQConvert::DefSQStaticMethod (engine, &ScriptEventSubsidyAwarded::Convert, "Convert", 2, ".x");

	SQConvert::DefSQMethod (engine, "GSEventSubsidyAwarded", &ScriptEventSubsidyAwarded::GetSubsidyID, "GetSubsidyID", 1, "x");

	engine->AddClassEnd();
}


static void SQGSEventSubsidyExpired_Register (Squirrel *engine)
{
	engine->AddClassBegin ("GSEventSubsidyExpired", "GSEvent");

	SQConvert::DefSQStaticMethod (engine, &ScriptEventSubsidyExpired::Convert, "Convert", 2, ".x");

	SQConvert::DefSQMethod (engine, "GSEventSubsidyExpired", &ScriptEventSubsidyExpired::GetSubsidyID, "GetSubsidyID", 1, "x");

	engine->AddClassEnd();
}


static void SQGSEventCompanyNew_Register (Squirrel *engine)
{
	engine->AddClassBegin ("GSEventCompanyNew", "GSEvent");

	SQConvert::DefSQStaticMethod (engine, &ScriptEventCompanyNew::Convert, "Convert", 2, ".x");

	SQConvert::DefSQMethod (engine, "GSEventCompanyNew", &ScriptEventCompanyNew::GetCompanyID, "GetCompanyID", 1, "x");

	engine->AddClassEnd();
}


static void SQGSEventCompanyInTrouble_Register (Squirrel *engine)
{
	engine->AddClassBegin ("GSEventCompanyInTrouble", "GSEvent");

	SQConvert::DefSQStaticMethod (engine, &ScriptEventCompanyInTrouble::Convert, "Convert", 2, ".x");

	SQConvert::DefSQMethod (engine, "GSEventCompanyInTrouble", &ScriptEventCompanyInTrouble::GetCompanyID, "GetCompanyID", 1, "x");

	engine->AddClassEnd();
}


static void SQGSEventCompanyMerger_Register (Squirrel *engine)
{
	engine->AddClassBegin ("GSEventCompanyMerger", "GSEvent");

	SQConvert::DefSQStaticMethod (engine, &ScriptEventCompanyMerger::Convert, "Convert", 2, ".x");

	SQConvert::DefSQMethod (engine, "GSEventCompanyMerger", &ScriptEventCompanyMerger::GetOldCompanyID, "GetOldCompanyID", 1, "x");
	SQConvert::DefSQMethod (engine, "GSEventCompanyMerger", &ScriptEventCompanyMerger::GetNewCompanyID, "GetNewCompanyID", 1, "x");

	engine->AddClassEnd();
}


static void SQGSEventCompanyBankrupt_Register (Squirrel *engine)
{
	engine->AddClassBegin ("GSEventCompanyBankrupt", "GSEvent");

	SQConvert::DefSQStaticMethod (engine, &ScriptEventCompanyBankrupt::Convert, "Convert", 2, ".x");

	SQConvert::DefSQMethod (engine, "GSEventCompanyBankrupt", &ScriptEventCompanyBankrupt::GetCompanyID, "GetCompanyID", 1, "x");

	engine->AddClassEnd();
}


static void SQGSEventIndustryOpen_Register (Squirrel *engine)
{
	engine->AddClassBegin ("GSEventIndustryOpen", "GSEvent");

	SQConvert::DefSQStaticMethod (engine, &ScriptEventIndustryOpen::Convert, "Convert", 2, ".x");

	SQConvert::DefSQMethod (engine, "GSEventIndustryOpen", &ScriptEventIndustryOpen::GetIndustryID, "GetIndustryID", 1, "x");

	engine->AddClassEnd();
}


static void SQGSEventIndustryClose_Register (Squirrel *engine)
{
	engine->AddClassBegin ("GSEventIndustryClose", "GSEvent");

	SQConvert::DefSQStaticMethod (engine, &ScriptEventIndustryClose::Convert, "Convert", 2, ".x");

	SQConvert::DefSQMethod (engine, "GSEventIndustryClose", &ScriptEventIndustryClose::GetIndustryID, "GetIndustryID", 1, "x");

	engine->AddClassEnd();
}


static void SQGSEventStationFirstVehicle_Register (Squirrel *engine)
{
	engine->AddClassBegin ("GSEventStationFirstVehicle", "GSEvent");

	SQConvert::DefSQStaticMethod (engine, &ScriptEventStationFirstVehicle::Convert, "Convert", 2, ".x");

	SQConvert::DefSQMethod (engine, "GSEventStationFirstVehicle", &ScriptEventStationFirstVehicle::GetStationID, "GetStationID", 1, "x");
	SQConvert::DefSQMethod (engine, "GSEventStationFirstVehicle", &ScriptEventStationFirstVehicle::GetVehicleID, "GetVehicleID", 1, "x");

	engine->AddClassEnd();
}


static void SQGSEventTownFounded_Register (Squirrel *engine)
{
	engine->AddClassBegin ("GSEventTownFounded", "GSEvent");

	SQConvert::DefSQStaticMethod (engine, &ScriptEventTownFounded::Convert, "Convert", 2, ".x");

	SQConvert::DefSQMethod (engine, "GSEventTownFounded", &ScriptEventTownFounded::GetTownID, "GetTownID", 1, "x");

	engine->AddClassEnd();
}


static void SQGSEventAdminPort_Register (Squirrel *engine)
{
	engine->AddClassBegin ("GSEventAdminPort", "GSEvent");

	SQConvert::DefSQStaticMethod (engine, &ScriptEventAdminPort::Convert, "Convert", 2, ".x");

	SQConvert::DefSQAdvancedMethod (engine, "GSEventAdminPort", &ScriptEventAdminPort::GetObject, "GetObject");

	engine->AddClassEnd();
}


static void SQGSEventWindowWidgetClick_Register (Squirrel *engine)
{
	engine->AddClassBegin ("GSEventWindowWidgetClick", "GSEvent");

	SQConvert::DefSQStaticMethod (engine, &ScriptEventWindowWidgetClick::Convert, "Convert", 2, ".x");

	SQConvert::DefSQMethod (engine, "GSEventWindowWidgetClick", &ScriptEventWindowWidgetClick::GetWindowClass,  "GetWindowClass",  1, "x");
	SQConvert::DefSQMethod (engine, "GSEventWindowWidgetClick", &ScriptEventWindowWidgetClick::GetWindowNumber, "GetWindowNumber", 1, "x");
	SQConvert::DefSQMethod (engine, "GSEventWindowWidgetClick", &ScriptEventWindowWidgetClick::GetWidgetNumber, "GetWidgetNumber", 1, "x");

	engine->AddClassEnd();
}


static void SQGSEventGoalQuestionAnswer_Register (Squirrel *engine)
{
	engine->AddClassBegin ("GSEventGoalQuestionAnswer", "GSEvent");

	SQConvert::DefSQStaticMethod (engine, &ScriptEventGoalQuestionAnswer::Convert, "Convert", 2, ".x");

	SQConvert::DefSQMethod (engine, "GSEventGoalQuestionAnswer", &ScriptEventGoalQuestionAnswer::GetUniqueID, "GetUniqueID", 1, "x");
	SQConvert::DefSQMethod (engine, "GSEventGoalQuestionAnswer", &ScriptEventGoalQuestionAnswer::GetCompany,  "GetCompany",  1, "x");
	SQConvert::DefSQMethod (engine, "GSEventGoalQuestionAnswer", &ScriptEventGoalQuestionAnswer::GetButton,   "GetButton",   1, "x");

	engine->AddClassEnd();
}


static void SQGSEventCompanyTown_Register (Squirrel *engine)
{
	engine->AddClassBegin ("GSEventCompanyTown", "GSEvent");

	SQConvert::DefSQStaticMethod (engine, &ScriptEventCompanyTown::Convert, "Convert", 2, ".x");

	SQConvert::DefSQMethod (engine, "GSEventCompanyTown", &ScriptEventCompanyTown::GetCompanyID, "GetCompanyID", 1, "x");
	SQConvert::DefSQMethod (engine, "GSEventCompanyTown", &ScriptEventCompanyTown::GetTownID,    "GetTownID",    1, "x");

	engine->AddClassEnd();
}


static void SQGSEventExclusiveTransportRights_Register (Squirrel *engine)
{
	engine->AddClassBegin ("GSEventExclusiveTransportRights", "GSEventCompanyTown");
	SQConvert::AddConstructor <void (ScriptEventExclusiveTransportRights::*)(ScriptCompany::CompanyID company, TownID town), 3> (engine, "xii");

	SQConvert::DefSQStaticMethod (engine, &ScriptEventExclusiveTransportRights::Convert, "Convert", 2, ".x");

	engine->AddClassEnd();
}


static void SQGSEventRoadReconstruction_Register (Squirrel *engine)
{
	engine->AddClassBegin ("GSEventRoadReconstruction", "GSEventCompanyTown");
	SQConvert::AddConstructor <void (ScriptEventRoadReconstruction::*)(ScriptCompany::CompanyID company, TownID town), 3> (engine, "xii");

	SQConvert::DefSQStaticMethod (engine, &ScriptEventRoadReconstruction::Convert, "Convert", 2, ".x");

	engine->AddClassEnd();
}
