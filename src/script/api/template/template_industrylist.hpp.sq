/* $Id$ */

/*
 * This file is part of OpenTTD.
 * OpenTTD is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * OpenTTD is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with OpenTTD. If not, see <http://www.gnu.org/licenses/>.
 */

/* THIS FILE IS AUTO-GENERATED; PLEASE DO NOT ALTER MANUALLY */

#include "../script_industrylist.hpp"

namespace SQConvert {
	/* Allow ScriptIndustryList to be used as Squirrel parameter */
	template <> inline       ScriptIndustryList *GetParam<ScriptIndustryList*> (HSQUIRRELVM vm, int index) { return  GetUserPointer<ScriptIndustryList> (vm, index); }
	template <> inline       ScriptIndustryList &GetParam<ScriptIndustryList&> (HSQUIRRELVM vm, int index) { return *GetUserPointer<ScriptIndustryList> (vm, index); }
	template <> inline const ScriptIndustryList *GetParam<const ScriptIndustryList*> (HSQUIRRELVM vm, int index) { return  GetUserPointer<ScriptIndustryList> (vm, index); }
	template <> inline const ScriptIndustryList &GetParam<const ScriptIndustryList&> (HSQUIRRELVM vm, int index) { return *GetUserPointer<ScriptIndustryList> (vm, index); }
	template <> inline void Push<ScriptIndustryList *> (HSQUIRRELVM vm, ScriptIndustryList *res) { PushObj<ScriptIndustryList> (vm, res, "IndustryList", true); }
} // namespace SQConvert

namespace SQConvert {
	/* Allow ScriptIndustryList_CargoAccepting to be used as Squirrel parameter */
	template <> inline       ScriptIndustryList_CargoAccepting *GetParam<ScriptIndustryList_CargoAccepting*> (HSQUIRRELVM vm, int index) { return  GetUserPointer<ScriptIndustryList_CargoAccepting> (vm, index); }
	template <> inline       ScriptIndustryList_CargoAccepting &GetParam<ScriptIndustryList_CargoAccepting&> (HSQUIRRELVM vm, int index) { return *GetUserPointer<ScriptIndustryList_CargoAccepting> (vm, index); }
	template <> inline const ScriptIndustryList_CargoAccepting *GetParam<const ScriptIndustryList_CargoAccepting*> (HSQUIRRELVM vm, int index) { return  GetUserPointer<ScriptIndustryList_CargoAccepting> (vm, index); }
	template <> inline const ScriptIndustryList_CargoAccepting &GetParam<const ScriptIndustryList_CargoAccepting&> (HSQUIRRELVM vm, int index) { return *GetUserPointer<ScriptIndustryList_CargoAccepting> (vm, index); }
	template <> inline void Push<ScriptIndustryList_CargoAccepting *> (HSQUIRRELVM vm, ScriptIndustryList_CargoAccepting *res) { PushObj<ScriptIndustryList_CargoAccepting> (vm, res, "IndustryList_CargoAccepting", true); }
} // namespace SQConvert

namespace SQConvert {
	/* Allow ScriptIndustryList_CargoProducing to be used as Squirrel parameter */
	template <> inline       ScriptIndustryList_CargoProducing *GetParam<ScriptIndustryList_CargoProducing*> (HSQUIRRELVM vm, int index) { return  GetUserPointer<ScriptIndustryList_CargoProducing> (vm, index); }
	template <> inline       ScriptIndustryList_CargoProducing &GetParam<ScriptIndustryList_CargoProducing&> (HSQUIRRELVM vm, int index) { return *GetUserPointer<ScriptIndustryList_CargoProducing> (vm, index); }
	template <> inline const ScriptIndustryList_CargoProducing *GetParam<const ScriptIndustryList_CargoProducing*> (HSQUIRRELVM vm, int index) { return  GetUserPointer<ScriptIndustryList_CargoProducing> (vm, index); }
	template <> inline const ScriptIndustryList_CargoProducing &GetParam<const ScriptIndustryList_CargoProducing&> (HSQUIRRELVM vm, int index) { return *GetUserPointer<ScriptIndustryList_CargoProducing> (vm, index); }
	template <> inline void Push<ScriptIndustryList_CargoProducing *> (HSQUIRRELVM vm, ScriptIndustryList_CargoProducing *res) { PushObj<ScriptIndustryList_CargoProducing> (vm, res, "IndustryList_CargoProducing", true); }
} // namespace SQConvert
