/* $Id$ */

/*
 * This file is part of OpenTTD.
 * OpenTTD is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * OpenTTD is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with OpenTTD. If not, see <http://www.gnu.org/licenses/>.
 */

/* THIS FILE IS AUTO-GENERATED; PLEASE DO NOT ALTER MANUALLY */

#include "../script_cargo.hpp"

namespace SQConvert {
	/* Allow enums to be used as Squirrel parameters */
	template <> inline ScriptCargo::CargoClass GetParam<ScriptCargo::CargoClass> (HSQUIRRELVM vm, int index) { return (ScriptCargo::CargoClass) GetInteger (vm, index); }
	template <> inline int Return<ScriptCargo::CargoClass>(HSQUIRRELVM vm, ScriptCargo::CargoClass res) { sq_pushinteger(vm, (int32)res); return 1; }
	template <> inline ScriptCargo::TownEffect GetParam<ScriptCargo::TownEffect> (HSQUIRRELVM vm, int index) { return (ScriptCargo::TownEffect) GetInteger (vm, index); }
	template <> inline int Return<ScriptCargo::TownEffect>(HSQUIRRELVM vm, ScriptCargo::TownEffect res) { sq_pushinteger(vm, (int32)res); return 1; }
	template <> inline ScriptCargo::SpecialCargoID GetParam<ScriptCargo::SpecialCargoID> (HSQUIRRELVM vm, int index) { return (ScriptCargo::SpecialCargoID) GetInteger (vm, index); }
	template <> inline int Return<ScriptCargo::SpecialCargoID>(HSQUIRRELVM vm, ScriptCargo::SpecialCargoID res) { sq_pushinteger(vm, (int32)res); return 1; }
	template <> inline ScriptCargo::DistributionType GetParam<ScriptCargo::DistributionType> (HSQUIRRELVM vm, int index) { return (ScriptCargo::DistributionType) GetInteger (vm, index); }
	template <> inline int Return<ScriptCargo::DistributionType>(HSQUIRRELVM vm, ScriptCargo::DistributionType res) { sq_pushinteger(vm, (int32)res); return 1; }

	/* Allow ScriptCargo to be used as Squirrel parameter */
	template <> inline       ScriptCargo *GetParam<ScriptCargo*> (HSQUIRRELVM vm, int index) { return  GetUserPointer<ScriptCargo> (vm, index); }
	template <> inline       ScriptCargo &GetParam<ScriptCargo&> (HSQUIRRELVM vm, int index) { return *GetUserPointer<ScriptCargo> (vm, index); }
	template <> inline const ScriptCargo *GetParam<const ScriptCargo*> (HSQUIRRELVM vm, int index) { return  GetUserPointer<ScriptCargo> (vm, index); }
	template <> inline const ScriptCargo &GetParam<const ScriptCargo&> (HSQUIRRELVM vm, int index) { return *GetUserPointer<ScriptCargo> (vm, index); }
	template <> inline int Return<ScriptCargo *>(HSQUIRRELVM vm, ScriptCargo *res) { if (res == NULL) { sq_pushnull(vm); return 1; } res->AddRef(); Squirrel::CreateClassInstanceVM(vm, "Cargo", res, NULL, DefSQDestructorCallback<ScriptCargo>, true); return 1; }
} // namespace SQConvert
