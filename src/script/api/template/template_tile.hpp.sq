/* $Id$ */

/*
 * This file is part of OpenTTD.
 * OpenTTD is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * OpenTTD is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with OpenTTD. If not, see <http://www.gnu.org/licenses/>.
 */

/* THIS FILE IS AUTO-GENERATED; PLEASE DO NOT ALTER MANUALLY */

#include "../script_tile.hpp"

namespace SQConvert {
	/* Allow enums to be used as Squirrel parameters */
	template <> inline ScriptTile::ErrorMessages GetParam<ScriptTile::ErrorMessages> (HSQUIRRELVM vm, int index) { return (ScriptTile::ErrorMessages) GetInteger (vm, index); }
	template <> inline void Push<ScriptTile::ErrorMessages> (HSQUIRRELVM vm, ScriptTile::ErrorMessages res) { sq_pushinteger (vm, (int32)res); }
	template <> inline ScriptTile::Corner GetParam<ScriptTile::Corner> (HSQUIRRELVM vm, int index) { return (ScriptTile::Corner) GetInteger (vm, index); }
	template <> inline void Push<ScriptTile::Corner> (HSQUIRRELVM vm, ScriptTile::Corner res) { sq_pushinteger (vm, (int32)res); }
	template <> inline ScriptTile::Slope GetParam<ScriptTile::Slope> (HSQUIRRELVM vm, int index) { return (ScriptTile::Slope) GetInteger (vm, index); }
	template <> inline void Push<ScriptTile::Slope> (HSQUIRRELVM vm, ScriptTile::Slope res) { sq_pushinteger (vm, (int32)res); }
	template <> inline ScriptTile::TransportType GetParam<ScriptTile::TransportType> (HSQUIRRELVM vm, int index) { return (ScriptTile::TransportType) GetInteger (vm, index); }
	template <> inline void Push<ScriptTile::TransportType> (HSQUIRRELVM vm, ScriptTile::TransportType res) { sq_pushinteger (vm, (int32)res); }
	template <> inline ScriptTile::BuildType GetParam<ScriptTile::BuildType> (HSQUIRRELVM vm, int index) { return (ScriptTile::BuildType) GetInteger (vm, index); }
	template <> inline void Push<ScriptTile::BuildType> (HSQUIRRELVM vm, ScriptTile::BuildType res) { sq_pushinteger (vm, (int32)res); }
	template <> inline ScriptTile::TerrainType GetParam<ScriptTile::TerrainType> (HSQUIRRELVM vm, int index) { return (ScriptTile::TerrainType) GetInteger (vm, index); }
	template <> inline void Push<ScriptTile::TerrainType> (HSQUIRRELVM vm, ScriptTile::TerrainType res) { sq_pushinteger (vm, (int32)res); }

	/* Allow ScriptTile to be used as Squirrel parameter */
	template <> inline       ScriptTile *GetParam<ScriptTile*> (HSQUIRRELVM vm, int index) { return  GetUserPointer<ScriptTile> (vm, index); }
	template <> inline       ScriptTile &GetParam<ScriptTile&> (HSQUIRRELVM vm, int index) { return *GetUserPointer<ScriptTile> (vm, index); }
	template <> inline const ScriptTile *GetParam<const ScriptTile*> (HSQUIRRELVM vm, int index) { return  GetUserPointer<ScriptTile> (vm, index); }
	template <> inline const ScriptTile &GetParam<const ScriptTile&> (HSQUIRRELVM vm, int index) { return *GetUserPointer<ScriptTile> (vm, index); }
	template <> inline void Push<ScriptTile *> (HSQUIRRELVM vm, ScriptTile *res) { PushObj<ScriptTile> (vm, res, "Tile", true); }
} // namespace SQConvert
